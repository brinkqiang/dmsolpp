// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: person.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_person_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_person_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_person_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_person_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_person_2eproto;
namespace db {
class fd_item;
class fd_itemDefaultTypeInternal;
extern fd_itemDefaultTypeInternal _fd_item_default_instance_;
class fd_item_list;
class fd_item_listDefaultTypeInternal;
extern fd_item_listDefaultTypeInternal _fd_item_list_default_instance_;
class fd_item_map;
class fd_item_mapDefaultTypeInternal;
extern fd_item_mapDefaultTypeInternal _fd_item_map_default_instance_;
class fd_item_map_ItemMapAddEntry_DoNotUse;
class fd_item_map_ItemMapAddEntry_DoNotUseDefaultTypeInternal;
extern fd_item_map_ItemMapAddEntry_DoNotUseDefaultTypeInternal _fd_item_map_ItemMapAddEntry_DoNotUse_default_instance_;
class fd_item_map_ItemMapChangeEntry_DoNotUse;
class fd_item_map_ItemMapChangeEntry_DoNotUseDefaultTypeInternal;
extern fd_item_map_ItemMapChangeEntry_DoNotUseDefaultTypeInternal _fd_item_map_ItemMapChangeEntry_DoNotUse_default_instance_;
class fd_item_map_ItemMapDelEntry_DoNotUse;
class fd_item_map_ItemMapDelEntry_DoNotUseDefaultTypeInternal;
extern fd_item_map_ItemMapDelEntry_DoNotUseDefaultTypeInternal _fd_item_map_ItemMapDelEntry_DoNotUse_default_instance_;
class fd_item_map_ItemMapTotalEntry_DoNotUse;
class fd_item_map_ItemMapTotalEntry_DoNotUseDefaultTypeInternal;
extern fd_item_map_ItemMapTotalEntry_DoNotUseDefaultTypeInternal _fd_item_map_ItemMapTotalEntry_DoNotUse_default_instance_;
class fd_task;
class fd_taskDefaultTypeInternal;
extern fd_taskDefaultTypeInternal _fd_task_default_instance_;
class tb_person;
class tb_personDefaultTypeInternal;
extern tb_personDefaultTypeInternal _tb_person_default_instance_;
class tb_person_ItemMapEntry_DoNotUse;
class tb_person_ItemMapEntry_DoNotUseDefaultTypeInternal;
extern tb_person_ItemMapEntry_DoNotUseDefaultTypeInternal _tb_person_ItemMapEntry_DoNotUse_default_instance_;
class tb_person_merge;
class tb_person_mergeDefaultTypeInternal;
extern tb_person_mergeDefaultTypeInternal _tb_person_merge_default_instance_;
}  // namespace db
PROTOBUF_NAMESPACE_OPEN
template<> ::db::fd_item* Arena::CreateMaybeMessage<::db::fd_item>(Arena*);
template<> ::db::fd_item_list* Arena::CreateMaybeMessage<::db::fd_item_list>(Arena*);
template<> ::db::fd_item_map* Arena::CreateMaybeMessage<::db::fd_item_map>(Arena*);
template<> ::db::fd_item_map_ItemMapAddEntry_DoNotUse* Arena::CreateMaybeMessage<::db::fd_item_map_ItemMapAddEntry_DoNotUse>(Arena*);
template<> ::db::fd_item_map_ItemMapChangeEntry_DoNotUse* Arena::CreateMaybeMessage<::db::fd_item_map_ItemMapChangeEntry_DoNotUse>(Arena*);
template<> ::db::fd_item_map_ItemMapDelEntry_DoNotUse* Arena::CreateMaybeMessage<::db::fd_item_map_ItemMapDelEntry_DoNotUse>(Arena*);
template<> ::db::fd_item_map_ItemMapTotalEntry_DoNotUse* Arena::CreateMaybeMessage<::db::fd_item_map_ItemMapTotalEntry_DoNotUse>(Arena*);
template<> ::db::fd_task* Arena::CreateMaybeMessage<::db::fd_task>(Arena*);
template<> ::db::tb_person* Arena::CreateMaybeMessage<::db::tb_person>(Arena*);
template<> ::db::tb_person_ItemMapEntry_DoNotUse* Arena::CreateMaybeMessage<::db::tb_person_ItemMapEntry_DoNotUse>(Arena*);
template<> ::db::tb_person_merge* Arena::CreateMaybeMessage<::db::tb_person_merge>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace db {

// ===================================================================

class fd_task PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:db.fd_task) */ {
 public:
  inline fd_task() : fd_task(nullptr) {}
  virtual ~fd_task();

  fd_task(const fd_task& from);
  fd_task(fd_task&& from) noexcept
    : fd_task() {
    *this = ::std::move(from);
  }

  inline fd_task& operator=(const fd_task& from) {
    CopyFrom(from);
    return *this;
  }
  inline fd_task& operator=(fd_task&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const fd_task& default_instance();

  static inline const fd_task* internal_default_instance() {
    return reinterpret_cast<const fd_task*>(
               &_fd_task_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(fd_task& a, fd_task& b) {
    a.Swap(&b);
  }
  inline void Swap(fd_task* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(fd_task* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline fd_task* New() const final {
    return CreateMaybeMessage<fd_task>(nullptr);
  }

  fd_task* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<fd_task>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const fd_task& from);
  void MergeFrom(const fd_task& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(fd_task* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "db.fd_task";
  }
  protected:
  explicit fd_task(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_person_2eproto);
    return ::descriptor_table_person_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 1,
    kCountFieldNumber = 2,
    kStateFieldNumber = 3,
  };
  // int32 task_id = 1;
  bool has_task_id() const;
  private:
  bool _internal_has_task_id() const;
  public:
  void clear_task_id();
  ::PROTOBUF_NAMESPACE_ID::int32 task_id() const;
  void set_task_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_task_id() const;
  void _internal_set_task_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 count = 2;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 state = 3;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:db.fd_task)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 task_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  friend struct ::TableStruct_person_2eproto;
};
// -------------------------------------------------------------------

class fd_item PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:db.fd_item) */ {
 public:
  inline fd_item() : fd_item(nullptr) {}
  virtual ~fd_item();

  fd_item(const fd_item& from);
  fd_item(fd_item&& from) noexcept
    : fd_item() {
    *this = ::std::move(from);
  }

  inline fd_item& operator=(const fd_item& from) {
    CopyFrom(from);
    return *this;
  }
  inline fd_item& operator=(fd_item&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const fd_item& default_instance();

  static inline const fd_item* internal_default_instance() {
    return reinterpret_cast<const fd_item*>(
               &_fd_item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(fd_item& a, fd_item& b) {
    a.Swap(&b);
  }
  inline void Swap(fd_item* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(fd_item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline fd_item* New() const final {
    return CreateMaybeMessage<fd_item>(nullptr);
  }

  fd_item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<fd_item>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const fd_item& from);
  void MergeFrom(const fd_item& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(fd_item* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "db.fd_item";
  }
  protected:
  explicit fd_item(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_person_2eproto);
    return ::descriptor_table_person_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTidFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // int32 tid = 1;
  bool has_tid() const;
  private:
  bool _internal_has_tid() const;
  public:
  void clear_tid();
  ::PROTOBUF_NAMESPACE_ID::int32 tid() const;
  void set_tid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tid() const;
  void _internal_set_tid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 count = 2;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:db.fd_item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 tid_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  friend struct ::TableStruct_person_2eproto;
};
// -------------------------------------------------------------------

class tb_person_ItemMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<tb_person_ItemMapEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<tb_person_ItemMapEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  tb_person_ItemMapEntry_DoNotUse();
  explicit tb_person_ItemMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const tb_person_ItemMapEntry_DoNotUse& other);
  static const tb_person_ItemMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const tb_person_ItemMapEntry_DoNotUse*>(&_tb_person_ItemMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_person_2eproto);
    return ::descriptor_table_person_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class tb_person PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:db.tb_person) */ {
 public:
  inline tb_person() : tb_person(nullptr) {}
  virtual ~tb_person();

  tb_person(const tb_person& from);
  tb_person(tb_person&& from) noexcept
    : tb_person() {
    *this = ::std::move(from);
  }

  inline tb_person& operator=(const tb_person& from) {
    CopyFrom(from);
    return *this;
  }
  inline tb_person& operator=(tb_person&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const tb_person& default_instance();

  static inline const tb_person* internal_default_instance() {
    return reinterpret_cast<const tb_person*>(
               &_tb_person_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(tb_person& a, tb_person& b) {
    a.Swap(&b);
  }
  inline void Swap(tb_person* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(tb_person* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline tb_person* New() const final {
    return CreateMaybeMessage<tb_person>(nullptr);
  }

  tb_person* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<tb_person>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const tb_person& from);
  void MergeFrom(const tb_person& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(tb_person* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "db.tb_person";
  }
  protected:
  explicit tb_person(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_person_2eproto);
    return ::descriptor_table_person_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kItemListFieldNumber = 20,
    kItemMapFieldNumber = 21,
    kNameFieldNumber = 3,
    kItemFieldNumber = 19,
    kUuidFieldNumber = 1,
    kJobFieldNumber = 2,
  };
  // repeated .db.fd_item item_list = 20;
  int item_list_size() const;
  private:
  int _internal_item_list_size() const;
  public:
  void clear_item_list();
  ::db::fd_item* mutable_item_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::db::fd_item >*
      mutable_item_list();
  private:
  const ::db::fd_item& _internal_item_list(int index) const;
  ::db::fd_item* _internal_add_item_list();
  public:
  const ::db::fd_item& item_list(int index) const;
  ::db::fd_item* add_item_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::db::fd_item >&
      item_list() const;

  // map<uint64, .db.fd_item> item_map = 21;
  int item_map_size() const;
  private:
  int _internal_item_map_size() const;
  public:
  void clear_item_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >&
      _internal_item_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >*
      _internal_mutable_item_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >&
      item_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >*
      mutable_item_map();

  // string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .db.fd_item item = 19;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::db::fd_item& item() const;
  ::db::fd_item* release_item();
  ::db::fd_item* mutable_item();
  void set_allocated_item(::db::fd_item* item);
  private:
  const ::db::fd_item& _internal_item() const;
  ::db::fd_item* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::db::fd_item* item);
  ::db::fd_item* unsafe_arena_release_item();

  // uint64 uuid = 1;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  ::PROTOBUF_NAMESPACE_ID::uint64 uuid() const;
  void set_uuid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_uuid() const;
  void _internal_set_uuid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 job = 2;
  bool has_job() const;
  private:
  bool _internal_has_job() const;
  public:
  void clear_job();
  ::PROTOBUF_NAMESPACE_ID::int32 job() const;
  void set_job(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_job() const;
  void _internal_set_job(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:db.tb_person)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::db::fd_item > item_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      tb_person_ItemMapEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> item_map_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::db::fd_item* item_;
  ::PROTOBUF_NAMESPACE_ID::uint64 uuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 job_;
  friend struct ::TableStruct_person_2eproto;
};
// -------------------------------------------------------------------

class fd_item_list PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:db.fd_item_list) */ {
 public:
  inline fd_item_list() : fd_item_list(nullptr) {}
  virtual ~fd_item_list();

  fd_item_list(const fd_item_list& from);
  fd_item_list(fd_item_list&& from) noexcept
    : fd_item_list() {
    *this = ::std::move(from);
  }

  inline fd_item_list& operator=(const fd_item_list& from) {
    CopyFrom(from);
    return *this;
  }
  inline fd_item_list& operator=(fd_item_list&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const fd_item_list& default_instance();

  static inline const fd_item_list* internal_default_instance() {
    return reinterpret_cast<const fd_item_list*>(
               &_fd_item_list_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(fd_item_list& a, fd_item_list& b) {
    a.Swap(&b);
  }
  inline void Swap(fd_item_list* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(fd_item_list* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline fd_item_list* New() const final {
    return CreateMaybeMessage<fd_item_list>(nullptr);
  }

  fd_item_list* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<fd_item_list>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const fd_item_list& from);
  void MergeFrom(const fd_item_list& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(fd_item_list* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "db.fd_item_list";
  }
  protected:
  explicit fd_item_list(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_person_2eproto);
    return ::descriptor_table_person_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemListTotalFieldNumber = 9,
    kItemListAddFieldNumber = 10,
    kItemListChangeFieldNumber = 11,
    kItemListDelFieldNumber = 12,
  };
  // repeated .db.fd_item item_list_total = 9;
  int item_list_total_size() const;
  private:
  int _internal_item_list_total_size() const;
  public:
  void clear_item_list_total();
  ::db::fd_item* mutable_item_list_total(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::db::fd_item >*
      mutable_item_list_total();
  private:
  const ::db::fd_item& _internal_item_list_total(int index) const;
  ::db::fd_item* _internal_add_item_list_total();
  public:
  const ::db::fd_item& item_list_total(int index) const;
  ::db::fd_item* add_item_list_total();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::db::fd_item >&
      item_list_total() const;

  // repeated .db.fd_item item_list_add = 10;
  int item_list_add_size() const;
  private:
  int _internal_item_list_add_size() const;
  public:
  void clear_item_list_add();
  ::db::fd_item* mutable_item_list_add(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::db::fd_item >*
      mutable_item_list_add();
  private:
  const ::db::fd_item& _internal_item_list_add(int index) const;
  ::db::fd_item* _internal_add_item_list_add();
  public:
  const ::db::fd_item& item_list_add(int index) const;
  ::db::fd_item* add_item_list_add();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::db::fd_item >&
      item_list_add() const;

  // repeated .db.fd_item item_list_change = 11;
  int item_list_change_size() const;
  private:
  int _internal_item_list_change_size() const;
  public:
  void clear_item_list_change();
  ::db::fd_item* mutable_item_list_change(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::db::fd_item >*
      mutable_item_list_change();
  private:
  const ::db::fd_item& _internal_item_list_change(int index) const;
  ::db::fd_item* _internal_add_item_list_change();
  public:
  const ::db::fd_item& item_list_change(int index) const;
  ::db::fd_item* add_item_list_change();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::db::fd_item >&
      item_list_change() const;

  // repeated .db.fd_item item_list_del = 12;
  int item_list_del_size() const;
  private:
  int _internal_item_list_del_size() const;
  public:
  void clear_item_list_del();
  ::db::fd_item* mutable_item_list_del(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::db::fd_item >*
      mutable_item_list_del();
  private:
  const ::db::fd_item& _internal_item_list_del(int index) const;
  ::db::fd_item* _internal_add_item_list_del();
  public:
  const ::db::fd_item& item_list_del(int index) const;
  ::db::fd_item* add_item_list_del();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::db::fd_item >&
      item_list_del() const;

  // @@protoc_insertion_point(class_scope:db.fd_item_list)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::db::fd_item > item_list_total_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::db::fd_item > item_list_add_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::db::fd_item > item_list_change_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::db::fd_item > item_list_del_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_person_2eproto;
};
// -------------------------------------------------------------------

class fd_item_map_ItemMapTotalEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<fd_item_map_ItemMapTotalEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<fd_item_map_ItemMapTotalEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  fd_item_map_ItemMapTotalEntry_DoNotUse();
  explicit fd_item_map_ItemMapTotalEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const fd_item_map_ItemMapTotalEntry_DoNotUse& other);
  static const fd_item_map_ItemMapTotalEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const fd_item_map_ItemMapTotalEntry_DoNotUse*>(&_fd_item_map_ItemMapTotalEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_person_2eproto);
    return ::descriptor_table_person_2eproto.file_level_metadata[5];
  }

  public:
};

// -------------------------------------------------------------------

class fd_item_map_ItemMapAddEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<fd_item_map_ItemMapAddEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<fd_item_map_ItemMapAddEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  fd_item_map_ItemMapAddEntry_DoNotUse();
  explicit fd_item_map_ItemMapAddEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const fd_item_map_ItemMapAddEntry_DoNotUse& other);
  static const fd_item_map_ItemMapAddEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const fd_item_map_ItemMapAddEntry_DoNotUse*>(&_fd_item_map_ItemMapAddEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_person_2eproto);
    return ::descriptor_table_person_2eproto.file_level_metadata[6];
  }

  public:
};

// -------------------------------------------------------------------

class fd_item_map_ItemMapChangeEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<fd_item_map_ItemMapChangeEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<fd_item_map_ItemMapChangeEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  fd_item_map_ItemMapChangeEntry_DoNotUse();
  explicit fd_item_map_ItemMapChangeEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const fd_item_map_ItemMapChangeEntry_DoNotUse& other);
  static const fd_item_map_ItemMapChangeEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const fd_item_map_ItemMapChangeEntry_DoNotUse*>(&_fd_item_map_ItemMapChangeEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_person_2eproto);
    return ::descriptor_table_person_2eproto.file_level_metadata[7];
  }

  public:
};

// -------------------------------------------------------------------

class fd_item_map_ItemMapDelEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<fd_item_map_ItemMapDelEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<fd_item_map_ItemMapDelEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  fd_item_map_ItemMapDelEntry_DoNotUse();
  explicit fd_item_map_ItemMapDelEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const fd_item_map_ItemMapDelEntry_DoNotUse& other);
  static const fd_item_map_ItemMapDelEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const fd_item_map_ItemMapDelEntry_DoNotUse*>(&_fd_item_map_ItemMapDelEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_person_2eproto);
    return ::descriptor_table_person_2eproto.file_level_metadata[8];
  }

  public:
};

// -------------------------------------------------------------------

class fd_item_map PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:db.fd_item_map) */ {
 public:
  inline fd_item_map() : fd_item_map(nullptr) {}
  virtual ~fd_item_map();

  fd_item_map(const fd_item_map& from);
  fd_item_map(fd_item_map&& from) noexcept
    : fd_item_map() {
    *this = ::std::move(from);
  }

  inline fd_item_map& operator=(const fd_item_map& from) {
    CopyFrom(from);
    return *this;
  }
  inline fd_item_map& operator=(fd_item_map&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const fd_item_map& default_instance();

  static inline const fd_item_map* internal_default_instance() {
    return reinterpret_cast<const fd_item_map*>(
               &_fd_item_map_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(fd_item_map& a, fd_item_map& b) {
    a.Swap(&b);
  }
  inline void Swap(fd_item_map* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(fd_item_map* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline fd_item_map* New() const final {
    return CreateMaybeMessage<fd_item_map>(nullptr);
  }

  fd_item_map* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<fd_item_map>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const fd_item_map& from);
  void MergeFrom(const fd_item_map& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(fd_item_map* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "db.fd_item_map";
  }
  protected:
  explicit fd_item_map(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_person_2eproto);
    return ::descriptor_table_person_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kItemMapTotalFieldNumber = 21,
    kItemMapAddFieldNumber = 22,
    kItemMapChangeFieldNumber = 23,
    kItemMapDelFieldNumber = 24,
  };
  // map<uint64, .db.fd_item> item_map_total = 21;
  int item_map_total_size() const;
  private:
  int _internal_item_map_total_size() const;
  public:
  void clear_item_map_total();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >&
      _internal_item_map_total() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >*
      _internal_mutable_item_map_total();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >&
      item_map_total() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >*
      mutable_item_map_total();

  // map<uint64, .db.fd_item> item_map_add = 22;
  int item_map_add_size() const;
  private:
  int _internal_item_map_add_size() const;
  public:
  void clear_item_map_add();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >&
      _internal_item_map_add() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >*
      _internal_mutable_item_map_add();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >&
      item_map_add() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >*
      mutable_item_map_add();

  // map<uint64, .db.fd_item> item_map_change = 23;
  int item_map_change_size() const;
  private:
  int _internal_item_map_change_size() const;
  public:
  void clear_item_map_change();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >&
      _internal_item_map_change() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >*
      _internal_mutable_item_map_change();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >&
      item_map_change() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >*
      mutable_item_map_change();

  // map<uint64, .db.fd_item> item_map_del = 24;
  int item_map_del_size() const;
  private:
  int _internal_item_map_del_size() const;
  public:
  void clear_item_map_del();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >&
      _internal_item_map_del() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >*
      _internal_mutable_item_map_del();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >&
      item_map_del() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >*
      mutable_item_map_del();

  // @@protoc_insertion_point(class_scope:db.fd_item_map)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      fd_item_map_ItemMapTotalEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> item_map_total_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      fd_item_map_ItemMapAddEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> item_map_add_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      fd_item_map_ItemMapChangeEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> item_map_change_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      fd_item_map_ItemMapDelEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> item_map_del_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_person_2eproto;
};
// -------------------------------------------------------------------

class tb_person_merge PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:db.tb_person_merge) */ {
 public:
  inline tb_person_merge() : tb_person_merge(nullptr) {}
  virtual ~tb_person_merge();

  tb_person_merge(const tb_person_merge& from);
  tb_person_merge(tb_person_merge&& from) noexcept
    : tb_person_merge() {
    *this = ::std::move(from);
  }

  inline tb_person_merge& operator=(const tb_person_merge& from) {
    CopyFrom(from);
    return *this;
  }
  inline tb_person_merge& operator=(tb_person_merge&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const tb_person_merge& default_instance();

  static inline const tb_person_merge* internal_default_instance() {
    return reinterpret_cast<const tb_person_merge*>(
               &_tb_person_merge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(tb_person_merge& a, tb_person_merge& b) {
    a.Swap(&b);
  }
  inline void Swap(tb_person_merge* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(tb_person_merge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline tb_person_merge* New() const final {
    return CreateMaybeMessage<tb_person_merge>(nullptr);
  }

  tb_person_merge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<tb_person_merge>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const tb_person_merge& from);
  void MergeFrom(const tb_person_merge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(tb_person_merge* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "db.tb_person_merge";
  }
  protected:
  explicit tb_person_merge(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_person_2eproto);
    return ::descriptor_table_person_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kItemFieldNumber = 19,
    kItemListFieldNumber = 20,
    kItemMapFieldNumber = 21,
    kUuidFieldNumber = 1,
    kJobFieldNumber = 2,
  };
  // string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .db.fd_item item = 19;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::db::fd_item& item() const;
  ::db::fd_item* release_item();
  ::db::fd_item* mutable_item();
  void set_allocated_item(::db::fd_item* item);
  private:
  const ::db::fd_item& _internal_item() const;
  ::db::fd_item* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::db::fd_item* item);
  ::db::fd_item* unsafe_arena_release_item();

  // .db.fd_item_list item_list = 20;
  bool has_item_list() const;
  private:
  bool _internal_has_item_list() const;
  public:
  void clear_item_list();
  const ::db::fd_item_list& item_list() const;
  ::db::fd_item_list* release_item_list();
  ::db::fd_item_list* mutable_item_list();
  void set_allocated_item_list(::db::fd_item_list* item_list);
  private:
  const ::db::fd_item_list& _internal_item_list() const;
  ::db::fd_item_list* _internal_mutable_item_list();
  public:
  void unsafe_arena_set_allocated_item_list(
      ::db::fd_item_list* item_list);
  ::db::fd_item_list* unsafe_arena_release_item_list();

  // .db.fd_item_map item_map = 21;
  bool has_item_map() const;
  private:
  bool _internal_has_item_map() const;
  public:
  void clear_item_map();
  const ::db::fd_item_map& item_map() const;
  ::db::fd_item_map* release_item_map();
  ::db::fd_item_map* mutable_item_map();
  void set_allocated_item_map(::db::fd_item_map* item_map);
  private:
  const ::db::fd_item_map& _internal_item_map() const;
  ::db::fd_item_map* _internal_mutable_item_map();
  public:
  void unsafe_arena_set_allocated_item_map(
      ::db::fd_item_map* item_map);
  ::db::fd_item_map* unsafe_arena_release_item_map();

  // uint64 uuid = 1;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  ::PROTOBUF_NAMESPACE_ID::uint64 uuid() const;
  void set_uuid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_uuid() const;
  void _internal_set_uuid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 job = 2;
  bool has_job() const;
  private:
  bool _internal_has_job() const;
  public:
  void clear_job();
  ::PROTOBUF_NAMESPACE_ID::int32 job() const;
  void set_job(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_job() const;
  void _internal_set_job(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:db.tb_person_merge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::db::fd_item* item_;
  ::db::fd_item_list* item_list_;
  ::db::fd_item_map* item_map_;
  ::PROTOBUF_NAMESPACE_ID::uint64 uuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 job_;
  friend struct ::TableStruct_person_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// fd_task

// int32 task_id = 1;
inline bool fd_task::_internal_has_task_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool fd_task::has_task_id() const {
  return _internal_has_task_id();
}
inline void fd_task::clear_task_id() {
  task_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 fd_task::_internal_task_id() const {
  return task_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 fd_task::task_id() const {
  // @@protoc_insertion_point(field_get:db.fd_task.task_id)
  return _internal_task_id();
}
inline void fd_task::_internal_set_task_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  task_id_ = value;
}
inline void fd_task::set_task_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_task_id(value);
  // @@protoc_insertion_point(field_set:db.fd_task.task_id)
}

// int32 count = 2;
inline bool fd_task::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool fd_task::has_count() const {
  return _internal_has_count();
}
inline void fd_task::clear_count() {
  count_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 fd_task::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 fd_task::count() const {
  // @@protoc_insertion_point(field_get:db.fd_task.count)
  return _internal_count();
}
inline void fd_task::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  count_ = value;
}
inline void fd_task::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:db.fd_task.count)
}

// int32 state = 3;
inline bool fd_task::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool fd_task::has_state() const {
  return _internal_has_state();
}
inline void fd_task::clear_state() {
  state_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 fd_task::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 fd_task::state() const {
  // @@protoc_insertion_point(field_get:db.fd_task.state)
  return _internal_state();
}
inline void fd_task::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  state_ = value;
}
inline void fd_task::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:db.fd_task.state)
}

// -------------------------------------------------------------------

// fd_item

// int32 tid = 1;
inline bool fd_item::_internal_has_tid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool fd_item::has_tid() const {
  return _internal_has_tid();
}
inline void fd_item::clear_tid() {
  tid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 fd_item::_internal_tid() const {
  return tid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 fd_item::tid() const {
  // @@protoc_insertion_point(field_get:db.fd_item.tid)
  return _internal_tid();
}
inline void fd_item::_internal_set_tid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  tid_ = value;
}
inline void fd_item::set_tid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tid(value);
  // @@protoc_insertion_point(field_set:db.fd_item.tid)
}

// int32 count = 2;
inline bool fd_item::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool fd_item::has_count() const {
  return _internal_has_count();
}
inline void fd_item::clear_count() {
  count_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 fd_item::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 fd_item::count() const {
  // @@protoc_insertion_point(field_get:db.fd_item.count)
  return _internal_count();
}
inline void fd_item::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  count_ = value;
}
inline void fd_item::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:db.fd_item.count)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// tb_person

// uint64 uuid = 1;
inline bool tb_person::_internal_has_uuid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool tb_person::has_uuid() const {
  return _internal_has_uuid();
}
inline void tb_person::clear_uuid() {
  uuid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 tb_person::_internal_uuid() const {
  return uuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 tb_person::uuid() const {
  // @@protoc_insertion_point(field_get:db.tb_person.uuid)
  return _internal_uuid();
}
inline void tb_person::_internal_set_uuid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  uuid_ = value;
}
inline void tb_person::set_uuid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:db.tb_person.uuid)
}

// int32 job = 2;
inline bool tb_person::_internal_has_job() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool tb_person::has_job() const {
  return _internal_has_job();
}
inline void tb_person::clear_job() {
  job_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 tb_person::_internal_job() const {
  return job_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 tb_person::job() const {
  // @@protoc_insertion_point(field_get:db.tb_person.job)
  return _internal_job();
}
inline void tb_person::_internal_set_job(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  job_ = value;
}
inline void tb_person::set_job(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_job(value);
  // @@protoc_insertion_point(field_set:db.tb_person.job)
}

// string name = 3;
inline bool tb_person::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool tb_person::has_name() const {
  return _internal_has_name();
}
inline void tb_person::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& tb_person::name() const {
  // @@protoc_insertion_point(field_get:db.tb_person.name)
  return _internal_name();
}
inline void tb_person::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:db.tb_person.name)
}
inline std::string* tb_person::mutable_name() {
  // @@protoc_insertion_point(field_mutable:db.tb_person.name)
  return _internal_mutable_name();
}
inline const std::string& tb_person::_internal_name() const {
  return name_.Get();
}
inline void tb_person::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void tb_person::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:db.tb_person.name)
}
inline void tb_person::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:db.tb_person.name)
}
inline void tb_person::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:db.tb_person.name)
}
inline std::string* tb_person::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* tb_person::release_name() {
  // @@protoc_insertion_point(field_release:db.tb_person.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void tb_person::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:db.tb_person.name)
}

// .db.fd_item item = 19;
inline bool tb_person::_internal_has_item() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || item_ != nullptr);
  return value;
}
inline bool tb_person::has_item() const {
  return _internal_has_item();
}
inline void tb_person::clear_item() {
  if (GetArena() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::db::fd_item& tb_person::_internal_item() const {
  const ::db::fd_item* p = item_;
  return p != nullptr ? *p : reinterpret_cast<const ::db::fd_item&>(
      ::db::_fd_item_default_instance_);
}
inline const ::db::fd_item& tb_person::item() const {
  // @@protoc_insertion_point(field_get:db.tb_person.item)
  return _internal_item();
}
inline void tb_person::unsafe_arena_set_allocated_item(
    ::db::fd_item* item) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item_);
  }
  item_ = item;
  if (item) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.tb_person.item)
}
inline ::db::fd_item* tb_person::release_item() {
  _has_bits_[0] &= ~0x00000002u;
  ::db::fd_item* temp = item_;
  item_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::db::fd_item* tb_person::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:db.tb_person.item)
  _has_bits_[0] &= ~0x00000002u;
  ::db::fd_item* temp = item_;
  item_ = nullptr;
  return temp;
}
inline ::db::fd_item* tb_person::_internal_mutable_item() {
  _has_bits_[0] |= 0x00000002u;
  if (item_ == nullptr) {
    auto* p = CreateMaybeMessage<::db::fd_item>(GetArena());
    item_ = p;
  }
  return item_;
}
inline ::db::fd_item* tb_person::mutable_item() {
  // @@protoc_insertion_point(field_mutable:db.tb_person.item)
  return _internal_mutable_item();
}
inline void tb_person::set_allocated_item(::db::fd_item* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete item_;
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(item);
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:db.tb_person.item)
}

// repeated .db.fd_item item_list = 20;
inline int tb_person::_internal_item_list_size() const {
  return item_list_.size();
}
inline int tb_person::item_list_size() const {
  return _internal_item_list_size();
}
inline void tb_person::clear_item_list() {
  item_list_.Clear();
}
inline ::db::fd_item* tb_person::mutable_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:db.tb_person.item_list)
  return item_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::db::fd_item >*
tb_person::mutable_item_list() {
  // @@protoc_insertion_point(field_mutable_list:db.tb_person.item_list)
  return &item_list_;
}
inline const ::db::fd_item& tb_person::_internal_item_list(int index) const {
  return item_list_.Get(index);
}
inline const ::db::fd_item& tb_person::item_list(int index) const {
  // @@protoc_insertion_point(field_get:db.tb_person.item_list)
  return _internal_item_list(index);
}
inline ::db::fd_item* tb_person::_internal_add_item_list() {
  return item_list_.Add();
}
inline ::db::fd_item* tb_person::add_item_list() {
  // @@protoc_insertion_point(field_add:db.tb_person.item_list)
  return _internal_add_item_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::db::fd_item >&
tb_person::item_list() const {
  // @@protoc_insertion_point(field_list:db.tb_person.item_list)
  return item_list_;
}

// map<uint64, .db.fd_item> item_map = 21;
inline int tb_person::_internal_item_map_size() const {
  return item_map_.size();
}
inline int tb_person::item_map_size() const {
  return _internal_item_map_size();
}
inline void tb_person::clear_item_map() {
  item_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >&
tb_person::_internal_item_map() const {
  return item_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >&
tb_person::item_map() const {
  // @@protoc_insertion_point(field_map:db.tb_person.item_map)
  return _internal_item_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >*
tb_person::_internal_mutable_item_map() {
  return item_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >*
tb_person::mutable_item_map() {
  // @@protoc_insertion_point(field_mutable_map:db.tb_person.item_map)
  return _internal_mutable_item_map();
}

// -------------------------------------------------------------------

// fd_item_list

// repeated .db.fd_item item_list_total = 9;
inline int fd_item_list::_internal_item_list_total_size() const {
  return item_list_total_.size();
}
inline int fd_item_list::item_list_total_size() const {
  return _internal_item_list_total_size();
}
inline void fd_item_list::clear_item_list_total() {
  item_list_total_.Clear();
}
inline ::db::fd_item* fd_item_list::mutable_item_list_total(int index) {
  // @@protoc_insertion_point(field_mutable:db.fd_item_list.item_list_total)
  return item_list_total_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::db::fd_item >*
fd_item_list::mutable_item_list_total() {
  // @@protoc_insertion_point(field_mutable_list:db.fd_item_list.item_list_total)
  return &item_list_total_;
}
inline const ::db::fd_item& fd_item_list::_internal_item_list_total(int index) const {
  return item_list_total_.Get(index);
}
inline const ::db::fd_item& fd_item_list::item_list_total(int index) const {
  // @@protoc_insertion_point(field_get:db.fd_item_list.item_list_total)
  return _internal_item_list_total(index);
}
inline ::db::fd_item* fd_item_list::_internal_add_item_list_total() {
  return item_list_total_.Add();
}
inline ::db::fd_item* fd_item_list::add_item_list_total() {
  // @@protoc_insertion_point(field_add:db.fd_item_list.item_list_total)
  return _internal_add_item_list_total();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::db::fd_item >&
fd_item_list::item_list_total() const {
  // @@protoc_insertion_point(field_list:db.fd_item_list.item_list_total)
  return item_list_total_;
}

// repeated .db.fd_item item_list_add = 10;
inline int fd_item_list::_internal_item_list_add_size() const {
  return item_list_add_.size();
}
inline int fd_item_list::item_list_add_size() const {
  return _internal_item_list_add_size();
}
inline void fd_item_list::clear_item_list_add() {
  item_list_add_.Clear();
}
inline ::db::fd_item* fd_item_list::mutable_item_list_add(int index) {
  // @@protoc_insertion_point(field_mutable:db.fd_item_list.item_list_add)
  return item_list_add_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::db::fd_item >*
fd_item_list::mutable_item_list_add() {
  // @@protoc_insertion_point(field_mutable_list:db.fd_item_list.item_list_add)
  return &item_list_add_;
}
inline const ::db::fd_item& fd_item_list::_internal_item_list_add(int index) const {
  return item_list_add_.Get(index);
}
inline const ::db::fd_item& fd_item_list::item_list_add(int index) const {
  // @@protoc_insertion_point(field_get:db.fd_item_list.item_list_add)
  return _internal_item_list_add(index);
}
inline ::db::fd_item* fd_item_list::_internal_add_item_list_add() {
  return item_list_add_.Add();
}
inline ::db::fd_item* fd_item_list::add_item_list_add() {
  // @@protoc_insertion_point(field_add:db.fd_item_list.item_list_add)
  return _internal_add_item_list_add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::db::fd_item >&
fd_item_list::item_list_add() const {
  // @@protoc_insertion_point(field_list:db.fd_item_list.item_list_add)
  return item_list_add_;
}

// repeated .db.fd_item item_list_change = 11;
inline int fd_item_list::_internal_item_list_change_size() const {
  return item_list_change_.size();
}
inline int fd_item_list::item_list_change_size() const {
  return _internal_item_list_change_size();
}
inline void fd_item_list::clear_item_list_change() {
  item_list_change_.Clear();
}
inline ::db::fd_item* fd_item_list::mutable_item_list_change(int index) {
  // @@protoc_insertion_point(field_mutable:db.fd_item_list.item_list_change)
  return item_list_change_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::db::fd_item >*
fd_item_list::mutable_item_list_change() {
  // @@protoc_insertion_point(field_mutable_list:db.fd_item_list.item_list_change)
  return &item_list_change_;
}
inline const ::db::fd_item& fd_item_list::_internal_item_list_change(int index) const {
  return item_list_change_.Get(index);
}
inline const ::db::fd_item& fd_item_list::item_list_change(int index) const {
  // @@protoc_insertion_point(field_get:db.fd_item_list.item_list_change)
  return _internal_item_list_change(index);
}
inline ::db::fd_item* fd_item_list::_internal_add_item_list_change() {
  return item_list_change_.Add();
}
inline ::db::fd_item* fd_item_list::add_item_list_change() {
  // @@protoc_insertion_point(field_add:db.fd_item_list.item_list_change)
  return _internal_add_item_list_change();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::db::fd_item >&
fd_item_list::item_list_change() const {
  // @@protoc_insertion_point(field_list:db.fd_item_list.item_list_change)
  return item_list_change_;
}

// repeated .db.fd_item item_list_del = 12;
inline int fd_item_list::_internal_item_list_del_size() const {
  return item_list_del_.size();
}
inline int fd_item_list::item_list_del_size() const {
  return _internal_item_list_del_size();
}
inline void fd_item_list::clear_item_list_del() {
  item_list_del_.Clear();
}
inline ::db::fd_item* fd_item_list::mutable_item_list_del(int index) {
  // @@protoc_insertion_point(field_mutable:db.fd_item_list.item_list_del)
  return item_list_del_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::db::fd_item >*
fd_item_list::mutable_item_list_del() {
  // @@protoc_insertion_point(field_mutable_list:db.fd_item_list.item_list_del)
  return &item_list_del_;
}
inline const ::db::fd_item& fd_item_list::_internal_item_list_del(int index) const {
  return item_list_del_.Get(index);
}
inline const ::db::fd_item& fd_item_list::item_list_del(int index) const {
  // @@protoc_insertion_point(field_get:db.fd_item_list.item_list_del)
  return _internal_item_list_del(index);
}
inline ::db::fd_item* fd_item_list::_internal_add_item_list_del() {
  return item_list_del_.Add();
}
inline ::db::fd_item* fd_item_list::add_item_list_del() {
  // @@protoc_insertion_point(field_add:db.fd_item_list.item_list_del)
  return _internal_add_item_list_del();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::db::fd_item >&
fd_item_list::item_list_del() const {
  // @@protoc_insertion_point(field_list:db.fd_item_list.item_list_del)
  return item_list_del_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// fd_item_map

// map<uint64, .db.fd_item> item_map_total = 21;
inline int fd_item_map::_internal_item_map_total_size() const {
  return item_map_total_.size();
}
inline int fd_item_map::item_map_total_size() const {
  return _internal_item_map_total_size();
}
inline void fd_item_map::clear_item_map_total() {
  item_map_total_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >&
fd_item_map::_internal_item_map_total() const {
  return item_map_total_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >&
fd_item_map::item_map_total() const {
  // @@protoc_insertion_point(field_map:db.fd_item_map.item_map_total)
  return _internal_item_map_total();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >*
fd_item_map::_internal_mutable_item_map_total() {
  return item_map_total_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >*
fd_item_map::mutable_item_map_total() {
  // @@protoc_insertion_point(field_mutable_map:db.fd_item_map.item_map_total)
  return _internal_mutable_item_map_total();
}

// map<uint64, .db.fd_item> item_map_add = 22;
inline int fd_item_map::_internal_item_map_add_size() const {
  return item_map_add_.size();
}
inline int fd_item_map::item_map_add_size() const {
  return _internal_item_map_add_size();
}
inline void fd_item_map::clear_item_map_add() {
  item_map_add_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >&
fd_item_map::_internal_item_map_add() const {
  return item_map_add_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >&
fd_item_map::item_map_add() const {
  // @@protoc_insertion_point(field_map:db.fd_item_map.item_map_add)
  return _internal_item_map_add();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >*
fd_item_map::_internal_mutable_item_map_add() {
  return item_map_add_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >*
fd_item_map::mutable_item_map_add() {
  // @@protoc_insertion_point(field_mutable_map:db.fd_item_map.item_map_add)
  return _internal_mutable_item_map_add();
}

// map<uint64, .db.fd_item> item_map_change = 23;
inline int fd_item_map::_internal_item_map_change_size() const {
  return item_map_change_.size();
}
inline int fd_item_map::item_map_change_size() const {
  return _internal_item_map_change_size();
}
inline void fd_item_map::clear_item_map_change() {
  item_map_change_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >&
fd_item_map::_internal_item_map_change() const {
  return item_map_change_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >&
fd_item_map::item_map_change() const {
  // @@protoc_insertion_point(field_map:db.fd_item_map.item_map_change)
  return _internal_item_map_change();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >*
fd_item_map::_internal_mutable_item_map_change() {
  return item_map_change_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >*
fd_item_map::mutable_item_map_change() {
  // @@protoc_insertion_point(field_mutable_map:db.fd_item_map.item_map_change)
  return _internal_mutable_item_map_change();
}

// map<uint64, .db.fd_item> item_map_del = 24;
inline int fd_item_map::_internal_item_map_del_size() const {
  return item_map_del_.size();
}
inline int fd_item_map::item_map_del_size() const {
  return _internal_item_map_del_size();
}
inline void fd_item_map::clear_item_map_del() {
  item_map_del_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >&
fd_item_map::_internal_item_map_del() const {
  return item_map_del_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >&
fd_item_map::item_map_del() const {
  // @@protoc_insertion_point(field_map:db.fd_item_map.item_map_del)
  return _internal_item_map_del();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >*
fd_item_map::_internal_mutable_item_map_del() {
  return item_map_del_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >*
fd_item_map::mutable_item_map_del() {
  // @@protoc_insertion_point(field_mutable_map:db.fd_item_map.item_map_del)
  return _internal_mutable_item_map_del();
}

// -------------------------------------------------------------------

// tb_person_merge

// uint64 uuid = 1;
inline bool tb_person_merge::_internal_has_uuid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool tb_person_merge::has_uuid() const {
  return _internal_has_uuid();
}
inline void tb_person_merge::clear_uuid() {
  uuid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 tb_person_merge::_internal_uuid() const {
  return uuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 tb_person_merge::uuid() const {
  // @@protoc_insertion_point(field_get:db.tb_person_merge.uuid)
  return _internal_uuid();
}
inline void tb_person_merge::_internal_set_uuid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  uuid_ = value;
}
inline void tb_person_merge::set_uuid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:db.tb_person_merge.uuid)
}

// int32 job = 2;
inline bool tb_person_merge::_internal_has_job() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool tb_person_merge::has_job() const {
  return _internal_has_job();
}
inline void tb_person_merge::clear_job() {
  job_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 tb_person_merge::_internal_job() const {
  return job_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 tb_person_merge::job() const {
  // @@protoc_insertion_point(field_get:db.tb_person_merge.job)
  return _internal_job();
}
inline void tb_person_merge::_internal_set_job(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  job_ = value;
}
inline void tb_person_merge::set_job(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_job(value);
  // @@protoc_insertion_point(field_set:db.tb_person_merge.job)
}

// string name = 3;
inline bool tb_person_merge::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool tb_person_merge::has_name() const {
  return _internal_has_name();
}
inline void tb_person_merge::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& tb_person_merge::name() const {
  // @@protoc_insertion_point(field_get:db.tb_person_merge.name)
  return _internal_name();
}
inline void tb_person_merge::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:db.tb_person_merge.name)
}
inline std::string* tb_person_merge::mutable_name() {
  // @@protoc_insertion_point(field_mutable:db.tb_person_merge.name)
  return _internal_mutable_name();
}
inline const std::string& tb_person_merge::_internal_name() const {
  return name_.Get();
}
inline void tb_person_merge::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void tb_person_merge::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:db.tb_person_merge.name)
}
inline void tb_person_merge::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:db.tb_person_merge.name)
}
inline void tb_person_merge::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:db.tb_person_merge.name)
}
inline std::string* tb_person_merge::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* tb_person_merge::release_name() {
  // @@protoc_insertion_point(field_release:db.tb_person_merge.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void tb_person_merge::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:db.tb_person_merge.name)
}

// .db.fd_item item = 19;
inline bool tb_person_merge::_internal_has_item() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || item_ != nullptr);
  return value;
}
inline bool tb_person_merge::has_item() const {
  return _internal_has_item();
}
inline void tb_person_merge::clear_item() {
  if (GetArena() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::db::fd_item& tb_person_merge::_internal_item() const {
  const ::db::fd_item* p = item_;
  return p != nullptr ? *p : reinterpret_cast<const ::db::fd_item&>(
      ::db::_fd_item_default_instance_);
}
inline const ::db::fd_item& tb_person_merge::item() const {
  // @@protoc_insertion_point(field_get:db.tb_person_merge.item)
  return _internal_item();
}
inline void tb_person_merge::unsafe_arena_set_allocated_item(
    ::db::fd_item* item) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item_);
  }
  item_ = item;
  if (item) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.tb_person_merge.item)
}
inline ::db::fd_item* tb_person_merge::release_item() {
  _has_bits_[0] &= ~0x00000002u;
  ::db::fd_item* temp = item_;
  item_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::db::fd_item* tb_person_merge::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:db.tb_person_merge.item)
  _has_bits_[0] &= ~0x00000002u;
  ::db::fd_item* temp = item_;
  item_ = nullptr;
  return temp;
}
inline ::db::fd_item* tb_person_merge::_internal_mutable_item() {
  _has_bits_[0] |= 0x00000002u;
  if (item_ == nullptr) {
    auto* p = CreateMaybeMessage<::db::fd_item>(GetArena());
    item_ = p;
  }
  return item_;
}
inline ::db::fd_item* tb_person_merge::mutable_item() {
  // @@protoc_insertion_point(field_mutable:db.tb_person_merge.item)
  return _internal_mutable_item();
}
inline void tb_person_merge::set_allocated_item(::db::fd_item* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete item_;
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(item);
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:db.tb_person_merge.item)
}

// .db.fd_item_list item_list = 20;
inline bool tb_person_merge::_internal_has_item_list() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || item_list_ != nullptr);
  return value;
}
inline bool tb_person_merge::has_item_list() const {
  return _internal_has_item_list();
}
inline void tb_person_merge::clear_item_list() {
  if (GetArena() == nullptr && item_list_ != nullptr) {
    delete item_list_;
  }
  item_list_ = nullptr;
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::db::fd_item_list& tb_person_merge::_internal_item_list() const {
  const ::db::fd_item_list* p = item_list_;
  return p != nullptr ? *p : reinterpret_cast<const ::db::fd_item_list&>(
      ::db::_fd_item_list_default_instance_);
}
inline const ::db::fd_item_list& tb_person_merge::item_list() const {
  // @@protoc_insertion_point(field_get:db.tb_person_merge.item_list)
  return _internal_item_list();
}
inline void tb_person_merge::unsafe_arena_set_allocated_item_list(
    ::db::fd_item_list* item_list) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item_list_);
  }
  item_list_ = item_list;
  if (item_list) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.tb_person_merge.item_list)
}
inline ::db::fd_item_list* tb_person_merge::release_item_list() {
  _has_bits_[0] &= ~0x00000004u;
  ::db::fd_item_list* temp = item_list_;
  item_list_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::db::fd_item_list* tb_person_merge::unsafe_arena_release_item_list() {
  // @@protoc_insertion_point(field_release:db.tb_person_merge.item_list)
  _has_bits_[0] &= ~0x00000004u;
  ::db::fd_item_list* temp = item_list_;
  item_list_ = nullptr;
  return temp;
}
inline ::db::fd_item_list* tb_person_merge::_internal_mutable_item_list() {
  _has_bits_[0] |= 0x00000004u;
  if (item_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::db::fd_item_list>(GetArena());
    item_list_ = p;
  }
  return item_list_;
}
inline ::db::fd_item_list* tb_person_merge::mutable_item_list() {
  // @@protoc_insertion_point(field_mutable:db.tb_person_merge.item_list)
  return _internal_mutable_item_list();
}
inline void tb_person_merge::set_allocated_item_list(::db::fd_item_list* item_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete item_list_;
  }
  if (item_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(item_list);
    if (message_arena != submessage_arena) {
      item_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item_list, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  item_list_ = item_list;
  // @@protoc_insertion_point(field_set_allocated:db.tb_person_merge.item_list)
}

// .db.fd_item_map item_map = 21;
inline bool tb_person_merge::_internal_has_item_map() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || item_map_ != nullptr);
  return value;
}
inline bool tb_person_merge::has_item_map() const {
  return _internal_has_item_map();
}
inline void tb_person_merge::clear_item_map() {
  if (GetArena() == nullptr && item_map_ != nullptr) {
    delete item_map_;
  }
  item_map_ = nullptr;
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::db::fd_item_map& tb_person_merge::_internal_item_map() const {
  const ::db::fd_item_map* p = item_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::db::fd_item_map&>(
      ::db::_fd_item_map_default_instance_);
}
inline const ::db::fd_item_map& tb_person_merge::item_map() const {
  // @@protoc_insertion_point(field_get:db.tb_person_merge.item_map)
  return _internal_item_map();
}
inline void tb_person_merge::unsafe_arena_set_allocated_item_map(
    ::db::fd_item_map* item_map) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item_map_);
  }
  item_map_ = item_map;
  if (item_map) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.tb_person_merge.item_map)
}
inline ::db::fd_item_map* tb_person_merge::release_item_map() {
  _has_bits_[0] &= ~0x00000008u;
  ::db::fd_item_map* temp = item_map_;
  item_map_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::db::fd_item_map* tb_person_merge::unsafe_arena_release_item_map() {
  // @@protoc_insertion_point(field_release:db.tb_person_merge.item_map)
  _has_bits_[0] &= ~0x00000008u;
  ::db::fd_item_map* temp = item_map_;
  item_map_ = nullptr;
  return temp;
}
inline ::db::fd_item_map* tb_person_merge::_internal_mutable_item_map() {
  _has_bits_[0] |= 0x00000008u;
  if (item_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::db::fd_item_map>(GetArena());
    item_map_ = p;
  }
  return item_map_;
}
inline ::db::fd_item_map* tb_person_merge::mutable_item_map() {
  // @@protoc_insertion_point(field_mutable:db.tb_person_merge.item_map)
  return _internal_mutable_item_map();
}
inline void tb_person_merge::set_allocated_item_map(::db::fd_item_map* item_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete item_map_;
  }
  if (item_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(item_map);
    if (message_arena != submessage_arena) {
      item_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item_map, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  item_map_ = item_map;
  // @@protoc_insertion_point(field_set_allocated:db.tb_person_merge.item_map)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace db

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_person_2eproto
