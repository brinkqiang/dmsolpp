// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: person.proto

#include "person.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_person_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_fd_item_person_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_person_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_fd_item_list_person_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_person_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_fd_item_map_person_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_person_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_fd_item_map_ItemMapAddEntry_DoNotUse_person_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_person_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_fd_item_map_ItemMapChangeEntry_DoNotUse_person_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_person_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_fd_item_map_ItemMapDelEntry_DoNotUse_person_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_person_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_fd_item_map_ItemMapTotalEntry_DoNotUse_person_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_person_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_tb_person_ItemMapEntry_DoNotUse_person_2eproto;
namespace db {
class fd_taskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<fd_task> _instance;
} _fd_task_default_instance_;
class fd_itemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<fd_item> _instance;
} _fd_item_default_instance_;
class tb_person_ItemMapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<tb_person_ItemMapEntry_DoNotUse> _instance;
} _tb_person_ItemMapEntry_DoNotUse_default_instance_;
class tb_personDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<tb_person> _instance;
} _tb_person_default_instance_;
class fd_item_listDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<fd_item_list> _instance;
} _fd_item_list_default_instance_;
class fd_item_map_ItemMapTotalEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<fd_item_map_ItemMapTotalEntry_DoNotUse> _instance;
} _fd_item_map_ItemMapTotalEntry_DoNotUse_default_instance_;
class fd_item_map_ItemMapAddEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<fd_item_map_ItemMapAddEntry_DoNotUse> _instance;
} _fd_item_map_ItemMapAddEntry_DoNotUse_default_instance_;
class fd_item_map_ItemMapChangeEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<fd_item_map_ItemMapChangeEntry_DoNotUse> _instance;
} _fd_item_map_ItemMapChangeEntry_DoNotUse_default_instance_;
class fd_item_map_ItemMapDelEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<fd_item_map_ItemMapDelEntry_DoNotUse> _instance;
} _fd_item_map_ItemMapDelEntry_DoNotUse_default_instance_;
class fd_item_mapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<fd_item_map> _instance;
} _fd_item_map_default_instance_;
class tb_person_mergeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<tb_person_merge> _instance;
} _tb_person_merge_default_instance_;
}  // namespace db
static void InitDefaultsscc_info_fd_item_person_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_fd_item_default_instance_;
    new (ptr) ::db::fd_item();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_fd_item_person_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_fd_item_person_2eproto}, {}};

static void InitDefaultsscc_info_fd_item_list_person_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_fd_item_list_default_instance_;
    new (ptr) ::db::fd_item_list();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_fd_item_list_person_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_fd_item_list_person_2eproto}, {
      &scc_info_fd_item_person_2eproto.base,}};

static void InitDefaultsscc_info_fd_item_map_person_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_fd_item_map_default_instance_;
    new (ptr) ::db::fd_item_map();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_fd_item_map_person_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_fd_item_map_person_2eproto}, {
      &scc_info_fd_item_map_ItemMapTotalEntry_DoNotUse_person_2eproto.base,
      &scc_info_fd_item_map_ItemMapAddEntry_DoNotUse_person_2eproto.base,
      &scc_info_fd_item_map_ItemMapChangeEntry_DoNotUse_person_2eproto.base,
      &scc_info_fd_item_map_ItemMapDelEntry_DoNotUse_person_2eproto.base,}};

static void InitDefaultsscc_info_fd_item_map_ItemMapAddEntry_DoNotUse_person_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_fd_item_map_ItemMapAddEntry_DoNotUse_default_instance_;
    new (ptr) ::db::fd_item_map_ItemMapAddEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_fd_item_map_ItemMapAddEntry_DoNotUse_person_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_fd_item_map_ItemMapAddEntry_DoNotUse_person_2eproto}, {
      &scc_info_fd_item_person_2eproto.base,}};

static void InitDefaultsscc_info_fd_item_map_ItemMapChangeEntry_DoNotUse_person_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_fd_item_map_ItemMapChangeEntry_DoNotUse_default_instance_;
    new (ptr) ::db::fd_item_map_ItemMapChangeEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_fd_item_map_ItemMapChangeEntry_DoNotUse_person_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_fd_item_map_ItemMapChangeEntry_DoNotUse_person_2eproto}, {
      &scc_info_fd_item_person_2eproto.base,}};

static void InitDefaultsscc_info_fd_item_map_ItemMapDelEntry_DoNotUse_person_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_fd_item_map_ItemMapDelEntry_DoNotUse_default_instance_;
    new (ptr) ::db::fd_item_map_ItemMapDelEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_fd_item_map_ItemMapDelEntry_DoNotUse_person_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_fd_item_map_ItemMapDelEntry_DoNotUse_person_2eproto}, {
      &scc_info_fd_item_person_2eproto.base,}};

static void InitDefaultsscc_info_fd_item_map_ItemMapTotalEntry_DoNotUse_person_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_fd_item_map_ItemMapTotalEntry_DoNotUse_default_instance_;
    new (ptr) ::db::fd_item_map_ItemMapTotalEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_fd_item_map_ItemMapTotalEntry_DoNotUse_person_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_fd_item_map_ItemMapTotalEntry_DoNotUse_person_2eproto}, {
      &scc_info_fd_item_person_2eproto.base,}};

static void InitDefaultsscc_info_fd_task_person_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_fd_task_default_instance_;
    new (ptr) ::db::fd_task();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_fd_task_person_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_fd_task_person_2eproto}, {}};

static void InitDefaultsscc_info_tb_person_person_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_tb_person_default_instance_;
    new (ptr) ::db::tb_person();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_tb_person_person_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_tb_person_person_2eproto}, {
      &scc_info_fd_item_person_2eproto.base,
      &scc_info_tb_person_ItemMapEntry_DoNotUse_person_2eproto.base,}};

static void InitDefaultsscc_info_tb_person_ItemMapEntry_DoNotUse_person_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_tb_person_ItemMapEntry_DoNotUse_default_instance_;
    new (ptr) ::db::tb_person_ItemMapEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_tb_person_ItemMapEntry_DoNotUse_person_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_tb_person_ItemMapEntry_DoNotUse_person_2eproto}, {
      &scc_info_fd_item_person_2eproto.base,}};

static void InitDefaultsscc_info_tb_person_merge_person_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_tb_person_merge_default_instance_;
    new (ptr) ::db::tb_person_merge();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_tb_person_merge_person_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_tb_person_merge_person_2eproto}, {
      &scc_info_fd_item_person_2eproto.base,
      &scc_info_fd_item_list_person_2eproto.base,
      &scc_info_fd_item_map_person_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_person_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_person_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_person_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_person_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::db::fd_task, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::db::fd_task, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::fd_task, task_id_),
  PROTOBUF_FIELD_OFFSET(::db::fd_task, count_),
  PROTOBUF_FIELD_OFFSET(::db::fd_task, state_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::db::fd_item, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::db::fd_item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::fd_item, tid_),
  PROTOBUF_FIELD_OFFSET(::db::fd_item, count_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::db::tb_person_ItemMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::db::tb_person_ItemMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::tb_person_ItemMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::db::tb_person_ItemMapEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::db::tb_person, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::db::tb_person, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::tb_person, uuid_),
  PROTOBUF_FIELD_OFFSET(::db::tb_person, job_),
  PROTOBUF_FIELD_OFFSET(::db::tb_person, name_),
  PROTOBUF_FIELD_OFFSET(::db::tb_person, item_),
  PROTOBUF_FIELD_OFFSET(::db::tb_person, item_list_),
  PROTOBUF_FIELD_OFFSET(::db::tb_person, item_map_),
  2,
  3,
  0,
  1,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::fd_item_list, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::fd_item_list, item_list_total_),
  PROTOBUF_FIELD_OFFSET(::db::fd_item_list, item_list_add_),
  PROTOBUF_FIELD_OFFSET(::db::fd_item_list, item_list_change_),
  PROTOBUF_FIELD_OFFSET(::db::fd_item_list, item_list_del_),
  PROTOBUF_FIELD_OFFSET(::db::fd_item_map_ItemMapTotalEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::db::fd_item_map_ItemMapTotalEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::fd_item_map_ItemMapTotalEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::db::fd_item_map_ItemMapTotalEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::db::fd_item_map_ItemMapAddEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::db::fd_item_map_ItemMapAddEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::fd_item_map_ItemMapAddEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::db::fd_item_map_ItemMapAddEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::db::fd_item_map_ItemMapChangeEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::db::fd_item_map_ItemMapChangeEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::fd_item_map_ItemMapChangeEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::db::fd_item_map_ItemMapChangeEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::db::fd_item_map_ItemMapDelEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::db::fd_item_map_ItemMapDelEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::fd_item_map_ItemMapDelEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::db::fd_item_map_ItemMapDelEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::fd_item_map, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::fd_item_map, item_map_total_),
  PROTOBUF_FIELD_OFFSET(::db::fd_item_map, item_map_add_),
  PROTOBUF_FIELD_OFFSET(::db::fd_item_map, item_map_change_),
  PROTOBUF_FIELD_OFFSET(::db::fd_item_map, item_map_del_),
  PROTOBUF_FIELD_OFFSET(::db::tb_person_merge, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::db::tb_person_merge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::tb_person_merge, uuid_),
  PROTOBUF_FIELD_OFFSET(::db::tb_person_merge, job_),
  PROTOBUF_FIELD_OFFSET(::db::tb_person_merge, name_),
  PROTOBUF_FIELD_OFFSET(::db::tb_person_merge, item_),
  PROTOBUF_FIELD_OFFSET(::db::tb_person_merge, item_list_),
  PROTOBUF_FIELD_OFFSET(::db::tb_person_merge, item_map_),
  4,
  5,
  0,
  1,
  2,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::db::fd_task)},
  { 11, 18, sizeof(::db::fd_item)},
  { 20, 27, sizeof(::db::tb_person_ItemMapEntry_DoNotUse)},
  { 29, 40, sizeof(::db::tb_person)},
  { 46, -1, sizeof(::db::fd_item_list)},
  { 55, 62, sizeof(::db::fd_item_map_ItemMapTotalEntry_DoNotUse)},
  { 64, 71, sizeof(::db::fd_item_map_ItemMapAddEntry_DoNotUse)},
  { 73, 80, sizeof(::db::fd_item_map_ItemMapChangeEntry_DoNotUse)},
  { 82, 89, sizeof(::db::fd_item_map_ItemMapDelEntry_DoNotUse)},
  { 91, -1, sizeof(::db::fd_item_map)},
  { 100, 111, sizeof(::db::tb_person_merge)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::db::_fd_task_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::db::_fd_item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::db::_tb_person_ItemMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::db::_tb_person_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::db::_fd_item_list_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::db::_fd_item_map_ItemMapTotalEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::db::_fd_item_map_ItemMapAddEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::db::_fd_item_map_ItemMapChangeEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::db::_fd_item_map_ItemMapDelEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::db::_fd_item_map_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::db::_tb_person_merge_default_instance_),
};

const char descriptor_table_protodef_person_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014person.proto\022\002db\"g\n\007fd_task\022\024\n\007task_id"
  "\030\001 \001(\005H\000\210\001\001\022\022\n\005count\030\002 \001(\005H\001\210\001\001\022\022\n\005state"
  "\030\003 \001(\005H\002\210\001\001B\n\n\010_task_idB\010\n\006_countB\010\n\006_st"
  "ate\"A\n\007fd_item\022\020\n\003tid\030\001 \001(\005H\000\210\001\001\022\022\n\005coun"
  "t\030\002 \001(\005H\001\210\001\001B\006\n\004_tidB\010\n\006_count\"\221\002\n\ttb_pe"
  "rson\022\021\n\004uuid\030\001 \001(\004H\000\210\001\001\022\020\n\003job\030\002 \001(\005H\001\210\001"
  "\001\022\021\n\004name\030\003 \001(\tH\002\210\001\001\022\036\n\004item\030\023 \001(\0132\013.db."
  "fd_itemH\003\210\001\001\022\036\n\titem_list\030\024 \003(\0132\013.db.fd_"
  "item\022,\n\010item_map\030\025 \003(\0132\032.db.tb_person.It"
  "emMapEntry\032;\n\014ItemMapEntry\022\013\n\003key\030\001 \001(\004\022"
  "\032\n\005value\030\002 \001(\0132\013.db.fd_item:\0028\001B\007\n\005_uuid"
  "B\006\n\004_jobB\007\n\005_nameB\007\n\005_item\"\243\001\n\014fd_item_l"
  "ist\022$\n\017item_list_total\030\t \003(\0132\013.db.fd_ite"
  "m\022\"\n\ritem_list_add\030\n \003(\0132\013.db.fd_item\022%\n"
  "\020item_list_change\030\013 \003(\0132\013.db.fd_item\022\"\n\r"
  "item_list_del\030\014 \003(\0132\013.db.fd_item\"\370\003\n\013fd_"
  "item_map\0229\n\016item_map_total\030\025 \003(\0132!.db.fd"
  "_item_map.ItemMapTotalEntry\0225\n\014item_map_"
  "add\030\026 \003(\0132\037.db.fd_item_map.ItemMapAddEnt"
  "ry\022;\n\017item_map_change\030\027 \003(\0132\".db.fd_item"
  "_map.ItemMapChangeEntry\0225\n\014item_map_del\030"
  "\030 \003(\0132\037.db.fd_item_map.ItemMapDelEntry\032@"
  "\n\021ItemMapTotalEntry\022\013\n\003key\030\001 \001(\004\022\032\n\005valu"
  "e\030\002 \001(\0132\013.db.fd_item:\0028\001\032>\n\017ItemMapAddEn"
  "try\022\013\n\003key\030\001 \001(\004\022\032\n\005value\030\002 \001(\0132\013.db.fd_"
  "item:\0028\001\032A\n\022ItemMapChangeEntry\022\013\n\003key\030\001 "
  "\001(\004\022\032\n\005value\030\002 \001(\0132\013.db.fd_item:\0028\001\032>\n\017I"
  "temMapDelEntry\022\013\n\003key\030\001 \001(\004\022\032\n\005value\030\002 \001"
  "(\0132\013.db.fd_item:\0028\001\"\371\001\n\017tb_person_merge\022"
  "\021\n\004uuid\030\001 \001(\004H\000\210\001\001\022\020\n\003job\030\002 \001(\005H\001\210\001\001\022\021\n\004"
  "name\030\003 \001(\tH\002\210\001\001\022\036\n\004item\030\023 \001(\0132\013.db.fd_it"
  "emH\003\210\001\001\022(\n\titem_list\030\024 \001(\0132\020.db.fd_item_"
  "listH\004\210\001\001\022&\n\010item_map\030\025 \001(\0132\017.db.fd_item"
  "_mapH\005\210\001\001B\007\n\005_uuidB\006\n\004_jobB\007\n\005_nameB\007\n\005_"
  "itemB\014\n\n_item_listB\013\n\t_item_mapb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_person_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_person_2eproto_sccs[11] = {
  &scc_info_fd_item_person_2eproto.base,
  &scc_info_fd_item_list_person_2eproto.base,
  &scc_info_fd_item_map_person_2eproto.base,
  &scc_info_fd_item_map_ItemMapAddEntry_DoNotUse_person_2eproto.base,
  &scc_info_fd_item_map_ItemMapChangeEntry_DoNotUse_person_2eproto.base,
  &scc_info_fd_item_map_ItemMapDelEntry_DoNotUse_person_2eproto.base,
  &scc_info_fd_item_map_ItemMapTotalEntry_DoNotUse_person_2eproto.base,
  &scc_info_fd_task_person_2eproto.base,
  &scc_info_tb_person_person_2eproto.base,
  &scc_info_tb_person_ItemMapEntry_DoNotUse_person_2eproto.base,
  &scc_info_tb_person_merge_person_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_person_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_person_2eproto = {
  false, false, descriptor_table_protodef_person_2eproto, "person.proto", 1399,
  &descriptor_table_person_2eproto_once, descriptor_table_person_2eproto_sccs, descriptor_table_person_2eproto_deps, 11, 0,
  schemas, file_default_instances, TableStruct_person_2eproto::offsets,
  file_level_metadata_person_2eproto, 11, file_level_enum_descriptors_person_2eproto, file_level_service_descriptors_person_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_person_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_person_2eproto)), true);
namespace db {

// ===================================================================

class fd_task::_Internal {
 public:
  using HasBits = decltype(std::declval<fd_task>()._has_bits_);
  static void set_has_task_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

fd_task::fd_task(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.fd_task)
}
fd_task::fd_task(const fd_task& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&task_id_, &from.task_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&task_id_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:db.fd_task)
}

void fd_task::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&task_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&task_id_)) + sizeof(state_));
}

fd_task::~fd_task() {
  // @@protoc_insertion_point(destructor:db.fd_task)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void fd_task::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void fd_task::ArenaDtor(void* object) {
  fd_task* _this = reinterpret_cast< fd_task* >(object);
  (void)_this;
}
void fd_task::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void fd_task::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const fd_task& fd_task::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_fd_task_person_2eproto.base);
  return *internal_default_instance();
}


void fd_task::Clear() {
// @@protoc_insertion_point(message_clear_start:db.fd_task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&task_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&task_id_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* fd_task::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 task_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_task_id(&has_bits);
          task_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_state(&has_bits);
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* fd_task::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.fd_task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 task_id = 1;
  if (_internal_has_task_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_task_id(), target);
  }

  // int32 count = 2;
  if (_internal_has_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // int32 state = 3;
  if (_internal_has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.fd_task)
  return target;
}

size_t fd_task::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.fd_task)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // int32 task_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_task_id());
    }

    // int32 count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_count());
    }

    // int32 state = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_state());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void fd_task::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.fd_task)
  GOOGLE_DCHECK_NE(&from, this);
  const fd_task* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<fd_task>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.fd_task)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.fd_task)
    MergeFrom(*source);
  }
}

void fd_task::MergeFrom(const fd_task& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.fd_task)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      task_id_ = from.task_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000004u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void fd_task::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.fd_task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fd_task::CopyFrom(const fd_task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.fd_task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fd_task::IsInitialized() const {
  return true;
}

void fd_task::InternalSwap(fd_task* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(fd_task, state_)
      + sizeof(fd_task::state_)
      - PROTOBUF_FIELD_OFFSET(fd_task, task_id_)>(
          reinterpret_cast<char*>(&task_id_),
          reinterpret_cast<char*>(&other->task_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata fd_task::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class fd_item::_Internal {
 public:
  using HasBits = decltype(std::declval<fd_item>()._has_bits_);
  static void set_has_tid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

fd_item::fd_item(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.fd_item)
}
fd_item::fd_item(const fd_item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tid_, &from.tid_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&tid_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:db.fd_item)
}

void fd_item::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&tid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&tid_)) + sizeof(count_));
}

fd_item::~fd_item() {
  // @@protoc_insertion_point(destructor:db.fd_item)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void fd_item::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void fd_item::ArenaDtor(void* object) {
  fd_item* _this = reinterpret_cast< fd_item* >(object);
  (void)_this;
}
void fd_item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void fd_item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const fd_item& fd_item::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_fd_item_person_2eproto.base);
  return *internal_default_instance();
}


void fd_item::Clear() {
// @@protoc_insertion_point(message_clear_start:db.fd_item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&tid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&tid_)) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* fd_item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 tid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tid(&has_bits);
          tid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* fd_item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.fd_item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 tid = 1;
  if (_internal_has_tid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_tid(), target);
  }

  // int32 count = 2;
  if (_internal_has_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.fd_item)
  return target;
}

size_t fd_item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.fd_item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // int32 tid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tid());
    }

    // int32 count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void fd_item::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.fd_item)
  GOOGLE_DCHECK_NE(&from, this);
  const fd_item* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<fd_item>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.fd_item)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.fd_item)
    MergeFrom(*source);
  }
}

void fd_item::MergeFrom(const fd_item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.fd_item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      tid_ = from.tid_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void fd_item::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.fd_item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fd_item::CopyFrom(const fd_item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.fd_item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fd_item::IsInitialized() const {
  return true;
}

void fd_item::InternalSwap(fd_item* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(fd_item, count_)
      + sizeof(fd_item::count_)
      - PROTOBUF_FIELD_OFFSET(fd_item, tid_)>(
          reinterpret_cast<char*>(&tid_),
          reinterpret_cast<char*>(&other->tid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata fd_item::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

tb_person_ItemMapEntry_DoNotUse::tb_person_ItemMapEntry_DoNotUse() {}
tb_person_ItemMapEntry_DoNotUse::tb_person_ItemMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void tb_person_ItemMapEntry_DoNotUse::MergeFrom(const tb_person_ItemMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata tb_person_ItemMapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void tb_person_ItemMapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class tb_person::_Internal {
 public:
  using HasBits = decltype(std::declval<tb_person>()._has_bits_);
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_job(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::db::fd_item& item(const tb_person* msg);
  static void set_has_item(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::db::fd_item&
tb_person::_Internal::item(const tb_person* msg) {
  return *msg->item_;
}
tb_person::tb_person(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  item_list_(arena),
  item_map_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.tb_person)
}
tb_person::tb_person(const tb_person& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      item_list_(from.item_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  item_map_.MergeFrom(from.item_map_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_item()) {
    item_ = new ::db::fd_item(*from.item_);
  } else {
    item_ = nullptr;
  }
  ::memcpy(&uuid_, &from.uuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&job_) -
    reinterpret_cast<char*>(&uuid_)) + sizeof(job_));
  // @@protoc_insertion_point(copy_constructor:db.tb_person)
}

void tb_person::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_tb_person_person_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&item_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&job_) -
      reinterpret_cast<char*>(&item_)) + sizeof(job_));
}

tb_person::~tb_person() {
  // @@protoc_insertion_point(destructor:db.tb_person)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void tb_person::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete item_;
}

void tb_person::ArenaDtor(void* object) {
  tb_person* _this = reinterpret_cast< tb_person* >(object);
  (void)_this;
}
void tb_person::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void tb_person::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const tb_person& tb_person::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_tb_person_person_2eproto.base);
  return *internal_default_instance();
}


void tb_person::Clear() {
// @@protoc_insertion_point(message_clear_start:db.tb_person)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_list_.Clear();
  item_map_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      if (GetArena() == nullptr && item_ != nullptr) {
        delete item_;
      }
      item_ = nullptr;
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&uuid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&job_) -
        reinterpret_cast<char*>(&uuid_)) + sizeof(job_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* tb_person::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_uuid(&has_bits);
          uuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 job = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_job(&has_bits);
          job_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "db.tb_person.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .db.fd_item item = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .db.fd_item item_list = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_item_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      // map<uint64, .db.fd_item> item_map = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&item_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* tb_person::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.tb_person)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 uuid = 1;
  if (_internal_has_uuid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_uuid(), target);
  }

  // int32 job = 2;
  if (_internal_has_job()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_job(), target);
  }

  // string name = 3;
  if (_internal_has_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db.tb_person.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // .db.fd_item item = 19;
  if (_internal_has_item()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::item(this), target, stream);
  }

  // repeated .db.fd_item item_list = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_item_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_item_list(i), target, stream);
  }

  // map<uint64, .db.fd_item> item_map = 21;
  if (!this->_internal_item_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_item_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_item_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >::const_iterator
          it = this->_internal_item_map().begin();
          it != this->_internal_item_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = tb_person_ItemMapEntry_DoNotUse::Funcs::InternalSerialize(21, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >::const_iterator
          it = this->_internal_item_map().begin();
          it != this->_internal_item_map().end(); ++it) {
        target = tb_person_ItemMapEntry_DoNotUse::Funcs::InternalSerialize(21, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.tb_person)
  return target;
}

size_t tb_person::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.tb_person)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .db.fd_item item_list = 20;
  total_size += 2UL * this->_internal_item_list_size();
  for (const auto& msg : this->item_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<uint64, .db.fd_item> item_map = 21;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_item_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >::const_iterator
      it = this->_internal_item_map().begin();
      it != this->_internal_item_map().end(); ++it) {
    total_size += tb_person_ItemMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // .db.fd_item item = 19;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *item_);
    }

    // uint64 uuid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_uuid());
    }

    // int32 job = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_job());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void tb_person::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.tb_person)
  GOOGLE_DCHECK_NE(&from, this);
  const tb_person* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<tb_person>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.tb_person)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.tb_person)
    MergeFrom(*source);
  }
}

void tb_person::MergeFrom(const tb_person& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.tb_person)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_list_.MergeFrom(from.item_list_);
  item_map_.MergeFrom(from.item_map_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_item()->::db::fd_item::MergeFrom(from._internal_item());
    }
    if (cached_has_bits & 0x00000004u) {
      uuid_ = from.uuid_;
    }
    if (cached_has_bits & 0x00000008u) {
      job_ = from.job_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void tb_person::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.tb_person)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tb_person::CopyFrom(const tb_person& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.tb_person)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tb_person::IsInitialized() const {
  return true;
}

void tb_person::InternalSwap(tb_person* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  item_list_.InternalSwap(&other->item_list_);
  item_map_.Swap(&other->item_map_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(tb_person, job_)
      + sizeof(tb_person::job_)
      - PROTOBUF_FIELD_OFFSET(tb_person, item_)>(
          reinterpret_cast<char*>(&item_),
          reinterpret_cast<char*>(&other->item_));
}

::PROTOBUF_NAMESPACE_ID::Metadata tb_person::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class fd_item_list::_Internal {
 public:
};

fd_item_list::fd_item_list(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  item_list_total_(arena),
  item_list_add_(arena),
  item_list_change_(arena),
  item_list_del_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.fd_item_list)
}
fd_item_list::fd_item_list(const fd_item_list& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      item_list_total_(from.item_list_total_),
      item_list_add_(from.item_list_add_),
      item_list_change_(from.item_list_change_),
      item_list_del_(from.item_list_del_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:db.fd_item_list)
}

void fd_item_list::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_fd_item_list_person_2eproto.base);
}

fd_item_list::~fd_item_list() {
  // @@protoc_insertion_point(destructor:db.fd_item_list)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void fd_item_list::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void fd_item_list::ArenaDtor(void* object) {
  fd_item_list* _this = reinterpret_cast< fd_item_list* >(object);
  (void)_this;
}
void fd_item_list::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void fd_item_list::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const fd_item_list& fd_item_list::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_fd_item_list_person_2eproto.base);
  return *internal_default_instance();
}


void fd_item_list::Clear() {
// @@protoc_insertion_point(message_clear_start:db.fd_item_list)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_list_total_.Clear();
  item_list_add_.Clear();
  item_list_change_.Clear();
  item_list_del_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* fd_item_list::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .db.fd_item item_list_total = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item_list_total(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .db.fd_item item_list_add = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item_list_add(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .db.fd_item item_list_change = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item_list_change(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .db.fd_item item_list_del = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item_list_del(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* fd_item_list::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.fd_item_list)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .db.fd_item item_list_total = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_item_list_total_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_item_list_total(i), target, stream);
  }

  // repeated .db.fd_item item_list_add = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_item_list_add_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_item_list_add(i), target, stream);
  }

  // repeated .db.fd_item item_list_change = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_item_list_change_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_item_list_change(i), target, stream);
  }

  // repeated .db.fd_item item_list_del = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_item_list_del_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_item_list_del(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.fd_item_list)
  return target;
}

size_t fd_item_list::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.fd_item_list)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .db.fd_item item_list_total = 9;
  total_size += 1UL * this->_internal_item_list_total_size();
  for (const auto& msg : this->item_list_total_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .db.fd_item item_list_add = 10;
  total_size += 1UL * this->_internal_item_list_add_size();
  for (const auto& msg : this->item_list_add_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .db.fd_item item_list_change = 11;
  total_size += 1UL * this->_internal_item_list_change_size();
  for (const auto& msg : this->item_list_change_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .db.fd_item item_list_del = 12;
  total_size += 1UL * this->_internal_item_list_del_size();
  for (const auto& msg : this->item_list_del_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void fd_item_list::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.fd_item_list)
  GOOGLE_DCHECK_NE(&from, this);
  const fd_item_list* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<fd_item_list>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.fd_item_list)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.fd_item_list)
    MergeFrom(*source);
  }
}

void fd_item_list::MergeFrom(const fd_item_list& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.fd_item_list)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_list_total_.MergeFrom(from.item_list_total_);
  item_list_add_.MergeFrom(from.item_list_add_);
  item_list_change_.MergeFrom(from.item_list_change_);
  item_list_del_.MergeFrom(from.item_list_del_);
}

void fd_item_list::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.fd_item_list)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fd_item_list::CopyFrom(const fd_item_list& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.fd_item_list)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fd_item_list::IsInitialized() const {
  return true;
}

void fd_item_list::InternalSwap(fd_item_list* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  item_list_total_.InternalSwap(&other->item_list_total_);
  item_list_add_.InternalSwap(&other->item_list_add_);
  item_list_change_.InternalSwap(&other->item_list_change_);
  item_list_del_.InternalSwap(&other->item_list_del_);
}

::PROTOBUF_NAMESPACE_ID::Metadata fd_item_list::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

fd_item_map_ItemMapTotalEntry_DoNotUse::fd_item_map_ItemMapTotalEntry_DoNotUse() {}
fd_item_map_ItemMapTotalEntry_DoNotUse::fd_item_map_ItemMapTotalEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void fd_item_map_ItemMapTotalEntry_DoNotUse::MergeFrom(const fd_item_map_ItemMapTotalEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata fd_item_map_ItemMapTotalEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void fd_item_map_ItemMapTotalEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

fd_item_map_ItemMapAddEntry_DoNotUse::fd_item_map_ItemMapAddEntry_DoNotUse() {}
fd_item_map_ItemMapAddEntry_DoNotUse::fd_item_map_ItemMapAddEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void fd_item_map_ItemMapAddEntry_DoNotUse::MergeFrom(const fd_item_map_ItemMapAddEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata fd_item_map_ItemMapAddEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void fd_item_map_ItemMapAddEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

fd_item_map_ItemMapChangeEntry_DoNotUse::fd_item_map_ItemMapChangeEntry_DoNotUse() {}
fd_item_map_ItemMapChangeEntry_DoNotUse::fd_item_map_ItemMapChangeEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void fd_item_map_ItemMapChangeEntry_DoNotUse::MergeFrom(const fd_item_map_ItemMapChangeEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata fd_item_map_ItemMapChangeEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void fd_item_map_ItemMapChangeEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

fd_item_map_ItemMapDelEntry_DoNotUse::fd_item_map_ItemMapDelEntry_DoNotUse() {}
fd_item_map_ItemMapDelEntry_DoNotUse::fd_item_map_ItemMapDelEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void fd_item_map_ItemMapDelEntry_DoNotUse::MergeFrom(const fd_item_map_ItemMapDelEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata fd_item_map_ItemMapDelEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void fd_item_map_ItemMapDelEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class fd_item_map::_Internal {
 public:
};

fd_item_map::fd_item_map(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  item_map_total_(arena),
  item_map_add_(arena),
  item_map_change_(arena),
  item_map_del_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.fd_item_map)
}
fd_item_map::fd_item_map(const fd_item_map& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  item_map_total_.MergeFrom(from.item_map_total_);
  item_map_add_.MergeFrom(from.item_map_add_);
  item_map_change_.MergeFrom(from.item_map_change_);
  item_map_del_.MergeFrom(from.item_map_del_);
  // @@protoc_insertion_point(copy_constructor:db.fd_item_map)
}

void fd_item_map::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_fd_item_map_person_2eproto.base);
}

fd_item_map::~fd_item_map() {
  // @@protoc_insertion_point(destructor:db.fd_item_map)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void fd_item_map::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void fd_item_map::ArenaDtor(void* object) {
  fd_item_map* _this = reinterpret_cast< fd_item_map* >(object);
  (void)_this;
}
void fd_item_map::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void fd_item_map::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const fd_item_map& fd_item_map::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_fd_item_map_person_2eproto.base);
  return *internal_default_instance();
}


void fd_item_map::Clear() {
// @@protoc_insertion_point(message_clear_start:db.fd_item_map)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_map_total_.Clear();
  item_map_add_.Clear();
  item_map_change_.Clear();
  item_map_del_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* fd_item_map::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<uint64, .db.fd_item> item_map_total = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&item_map_total_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else goto handle_unusual;
        continue;
      // map<uint64, .db.fd_item> item_map_add = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&item_map_add_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else goto handle_unusual;
        continue;
      // map<uint64, .db.fd_item> item_map_change = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&item_map_change_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else goto handle_unusual;
        continue;
      // map<uint64, .db.fd_item> item_map_del = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&item_map_del_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* fd_item_map::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.fd_item_map)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint64, .db.fd_item> item_map_total = 21;
  if (!this->_internal_item_map_total().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_item_map_total().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_item_map_total().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >::const_iterator
          it = this->_internal_item_map_total().begin();
          it != this->_internal_item_map_total().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = fd_item_map_ItemMapTotalEntry_DoNotUse::Funcs::InternalSerialize(21, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >::const_iterator
          it = this->_internal_item_map_total().begin();
          it != this->_internal_item_map_total().end(); ++it) {
        target = fd_item_map_ItemMapTotalEntry_DoNotUse::Funcs::InternalSerialize(21, it->first, it->second, target, stream);
      }
    }
  }

  // map<uint64, .db.fd_item> item_map_add = 22;
  if (!this->_internal_item_map_add().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_item_map_add().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_item_map_add().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >::const_iterator
          it = this->_internal_item_map_add().begin();
          it != this->_internal_item_map_add().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = fd_item_map_ItemMapAddEntry_DoNotUse::Funcs::InternalSerialize(22, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >::const_iterator
          it = this->_internal_item_map_add().begin();
          it != this->_internal_item_map_add().end(); ++it) {
        target = fd_item_map_ItemMapAddEntry_DoNotUse::Funcs::InternalSerialize(22, it->first, it->second, target, stream);
      }
    }
  }

  // map<uint64, .db.fd_item> item_map_change = 23;
  if (!this->_internal_item_map_change().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_item_map_change().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_item_map_change().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >::const_iterator
          it = this->_internal_item_map_change().begin();
          it != this->_internal_item_map_change().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = fd_item_map_ItemMapChangeEntry_DoNotUse::Funcs::InternalSerialize(23, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >::const_iterator
          it = this->_internal_item_map_change().begin();
          it != this->_internal_item_map_change().end(); ++it) {
        target = fd_item_map_ItemMapChangeEntry_DoNotUse::Funcs::InternalSerialize(23, it->first, it->second, target, stream);
      }
    }
  }

  // map<uint64, .db.fd_item> item_map_del = 24;
  if (!this->_internal_item_map_del().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_item_map_del().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_item_map_del().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >::const_iterator
          it = this->_internal_item_map_del().begin();
          it != this->_internal_item_map_del().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = fd_item_map_ItemMapDelEntry_DoNotUse::Funcs::InternalSerialize(24, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >::const_iterator
          it = this->_internal_item_map_del().begin();
          it != this->_internal_item_map_del().end(); ++it) {
        target = fd_item_map_ItemMapDelEntry_DoNotUse::Funcs::InternalSerialize(24, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.fd_item_map)
  return target;
}

size_t fd_item_map::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.fd_item_map)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint64, .db.fd_item> item_map_total = 21;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_item_map_total_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >::const_iterator
      it = this->_internal_item_map_total().begin();
      it != this->_internal_item_map_total().end(); ++it) {
    total_size += fd_item_map_ItemMapTotalEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint64, .db.fd_item> item_map_add = 22;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_item_map_add_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >::const_iterator
      it = this->_internal_item_map_add().begin();
      it != this->_internal_item_map_add().end(); ++it) {
    total_size += fd_item_map_ItemMapAddEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint64, .db.fd_item> item_map_change = 23;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_item_map_change_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >::const_iterator
      it = this->_internal_item_map_change().begin();
      it != this->_internal_item_map_change().end(); ++it) {
    total_size += fd_item_map_ItemMapChangeEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint64, .db.fd_item> item_map_del = 24;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_item_map_del_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::db::fd_item >::const_iterator
      it = this->_internal_item_map_del().begin();
      it != this->_internal_item_map_del().end(); ++it) {
    total_size += fd_item_map_ItemMapDelEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void fd_item_map::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.fd_item_map)
  GOOGLE_DCHECK_NE(&from, this);
  const fd_item_map* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<fd_item_map>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.fd_item_map)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.fd_item_map)
    MergeFrom(*source);
  }
}

void fd_item_map::MergeFrom(const fd_item_map& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.fd_item_map)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_map_total_.MergeFrom(from.item_map_total_);
  item_map_add_.MergeFrom(from.item_map_add_);
  item_map_change_.MergeFrom(from.item_map_change_);
  item_map_del_.MergeFrom(from.item_map_del_);
}

void fd_item_map::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.fd_item_map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fd_item_map::CopyFrom(const fd_item_map& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.fd_item_map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fd_item_map::IsInitialized() const {
  return true;
}

void fd_item_map::InternalSwap(fd_item_map* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  item_map_total_.Swap(&other->item_map_total_);
  item_map_add_.Swap(&other->item_map_add_);
  item_map_change_.Swap(&other->item_map_change_);
  item_map_del_.Swap(&other->item_map_del_);
}

::PROTOBUF_NAMESPACE_ID::Metadata fd_item_map::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class tb_person_merge::_Internal {
 public:
  using HasBits = decltype(std::declval<tb_person_merge>()._has_bits_);
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_job(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::db::fd_item& item(const tb_person_merge* msg);
  static void set_has_item(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::db::fd_item_list& item_list(const tb_person_merge* msg);
  static void set_has_item_list(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::db::fd_item_map& item_map(const tb_person_merge* msg);
  static void set_has_item_map(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::db::fd_item&
tb_person_merge::_Internal::item(const tb_person_merge* msg) {
  return *msg->item_;
}
const ::db::fd_item_list&
tb_person_merge::_Internal::item_list(const tb_person_merge* msg) {
  return *msg->item_list_;
}
const ::db::fd_item_map&
tb_person_merge::_Internal::item_map(const tb_person_merge* msg) {
  return *msg->item_map_;
}
tb_person_merge::tb_person_merge(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.tb_person_merge)
}
tb_person_merge::tb_person_merge(const tb_person_merge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_item()) {
    item_ = new ::db::fd_item(*from.item_);
  } else {
    item_ = nullptr;
  }
  if (from._internal_has_item_list()) {
    item_list_ = new ::db::fd_item_list(*from.item_list_);
  } else {
    item_list_ = nullptr;
  }
  if (from._internal_has_item_map()) {
    item_map_ = new ::db::fd_item_map(*from.item_map_);
  } else {
    item_map_ = nullptr;
  }
  ::memcpy(&uuid_, &from.uuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&job_) -
    reinterpret_cast<char*>(&uuid_)) + sizeof(job_));
  // @@protoc_insertion_point(copy_constructor:db.tb_person_merge)
}

void tb_person_merge::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_tb_person_merge_person_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&item_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&job_) -
      reinterpret_cast<char*>(&item_)) + sizeof(job_));
}

tb_person_merge::~tb_person_merge() {
  // @@protoc_insertion_point(destructor:db.tb_person_merge)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void tb_person_merge::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete item_;
  if (this != internal_default_instance()) delete item_list_;
  if (this != internal_default_instance()) delete item_map_;
}

void tb_person_merge::ArenaDtor(void* object) {
  tb_person_merge* _this = reinterpret_cast< tb_person_merge* >(object);
  (void)_this;
}
void tb_person_merge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void tb_person_merge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const tb_person_merge& tb_person_merge::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_tb_person_merge_person_2eproto.base);
  return *internal_default_instance();
}


void tb_person_merge::Clear() {
// @@protoc_insertion_point(message_clear_start:db.tb_person_merge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      if (GetArena() == nullptr && item_ != nullptr) {
        delete item_;
      }
      item_ = nullptr;
    }
    if (cached_has_bits & 0x00000004u) {
      if (GetArena() == nullptr && item_list_ != nullptr) {
        delete item_list_;
      }
      item_list_ = nullptr;
    }
    if (cached_has_bits & 0x00000008u) {
      if (GetArena() == nullptr && item_map_ != nullptr) {
        delete item_map_;
      }
      item_map_ = nullptr;
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&uuid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&job_) -
        reinterpret_cast<char*>(&uuid_)) + sizeof(job_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* tb_person_merge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_uuid(&has_bits);
          uuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 job = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_job(&has_bits);
          job_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "db.tb_person_merge.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .db.fd_item item = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .db.fd_item_list item_list = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_item_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .db.fd_item_map item_map = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_item_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* tb_person_merge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.tb_person_merge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 uuid = 1;
  if (_internal_has_uuid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_uuid(), target);
  }

  // int32 job = 2;
  if (_internal_has_job()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_job(), target);
  }

  // string name = 3;
  if (_internal_has_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db.tb_person_merge.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // .db.fd_item item = 19;
  if (_internal_has_item()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::item(this), target, stream);
  }

  // .db.fd_item_list item_list = 20;
  if (_internal_has_item_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::item_list(this), target, stream);
  }

  // .db.fd_item_map item_map = 21;
  if (_internal_has_item_map()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::item_map(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.tb_person_merge)
  return target;
}

size_t tb_person_merge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.tb_person_merge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // .db.fd_item item = 19;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *item_);
    }

    // .db.fd_item_list item_list = 20;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *item_list_);
    }

    // .db.fd_item_map item_map = 21;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *item_map_);
    }

    // uint64 uuid = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_uuid());
    }

    // int32 job = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_job());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void tb_person_merge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.tb_person_merge)
  GOOGLE_DCHECK_NE(&from, this);
  const tb_person_merge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<tb_person_merge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.tb_person_merge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.tb_person_merge)
    MergeFrom(*source);
  }
}

void tb_person_merge::MergeFrom(const tb_person_merge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.tb_person_merge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_item()->::db::fd_item::MergeFrom(from._internal_item());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_item_list()->::db::fd_item_list::MergeFrom(from._internal_item_list());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_item_map()->::db::fd_item_map::MergeFrom(from._internal_item_map());
    }
    if (cached_has_bits & 0x00000010u) {
      uuid_ = from.uuid_;
    }
    if (cached_has_bits & 0x00000020u) {
      job_ = from.job_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void tb_person_merge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.tb_person_merge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tb_person_merge::CopyFrom(const tb_person_merge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.tb_person_merge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tb_person_merge::IsInitialized() const {
  return true;
}

void tb_person_merge::InternalSwap(tb_person_merge* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(tb_person_merge, job_)
      + sizeof(tb_person_merge::job_)
      - PROTOBUF_FIELD_OFFSET(tb_person_merge, item_)>(
          reinterpret_cast<char*>(&item_),
          reinterpret_cast<char*>(&other->item_));
}

::PROTOBUF_NAMESPACE_ID::Metadata tb_person_merge::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace db
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::db::fd_task* Arena::CreateMaybeMessage< ::db::fd_task >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::fd_task >(arena);
}
template<> PROTOBUF_NOINLINE ::db::fd_item* Arena::CreateMaybeMessage< ::db::fd_item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::fd_item >(arena);
}
template<> PROTOBUF_NOINLINE ::db::tb_person_ItemMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::db::tb_person_ItemMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::tb_person_ItemMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::db::tb_person* Arena::CreateMaybeMessage< ::db::tb_person >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::tb_person >(arena);
}
template<> PROTOBUF_NOINLINE ::db::fd_item_list* Arena::CreateMaybeMessage< ::db::fd_item_list >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::fd_item_list >(arena);
}
template<> PROTOBUF_NOINLINE ::db::fd_item_map_ItemMapTotalEntry_DoNotUse* Arena::CreateMaybeMessage< ::db::fd_item_map_ItemMapTotalEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::fd_item_map_ItemMapTotalEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::db::fd_item_map_ItemMapAddEntry_DoNotUse* Arena::CreateMaybeMessage< ::db::fd_item_map_ItemMapAddEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::fd_item_map_ItemMapAddEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::db::fd_item_map_ItemMapChangeEntry_DoNotUse* Arena::CreateMaybeMessage< ::db::fd_item_map_ItemMapChangeEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::fd_item_map_ItemMapChangeEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::db::fd_item_map_ItemMapDelEntry_DoNotUse* Arena::CreateMaybeMessage< ::db::fd_item_map_ItemMapDelEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::fd_item_map_ItemMapDelEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::db::fd_item_map* Arena::CreateMaybeMessage< ::db::fd_item_map >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::fd_item_map >(arena);
}
template<> PROTOBUF_NOINLINE ::db::tb_person_merge* Arena::CreateMaybeMessage< ::db::tb_person_merge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::tb_person_merge >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
