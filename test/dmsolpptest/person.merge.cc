/********************************************************************
**       This cc file is generated by program,                   **
**            Please do not change it directly.                    **
**                   Auther: brinkqiang                            **
********************************************************************/
// source: person.proto

#include "person.merge.h"


bool EqualFrom(::db::fd_task& data, ::db::fd_task& data2)
{
    
    if (data.task_id() != data2.task_id())
    {
        return false;
    }
    if (data.count() != data2.count())
    {
        return false;
    }
    if (data.state() != data2.state())
    {
        return false;
    }
    return true;
}

bool EqualFrom(::db::fd_item& data, ::db::fd_item& data2)
{
    
    if (data.tid() != data2.tid())
    {
        return false;
    }
    if (data.count() != data2.count())
    {
        return false;
    }
    return true;
}

bool EqualFrom(::db::tb_person& data, ::db::tb_person& data2)
{
    
    if (data.uuid() != data2.uuid())
    {
        return false;
    }
    if (data.job() != data2.job())
    {
        return false;
    }
    if (data.name() != data2.name())
    {
        return false;
    }
    if (!EqualFrom(*data.mutable_item(), *data2.mutable_item()))
    {
        return false;
    }
    if (data.mutable_item_list()->size() != data2.mutable_item_list()->size())
    {
        return false;
    }

    for (auto it = data.mutable_item_list()->begin(),
            it2 = data2.mutable_item_list()->begin();
            it != data.mutable_item_list()->end() &&
            it2 != data2.mutable_item_list()->end(); it++, it2++)
    {
        if (!EqualFrom(*it, *it2))
        {
            return false;
        }
    }
    if (data.mutable_item_map()->size() != data2.mutable_item_map()->size())
    {
        return false;
    }

    for (auto it2 = data2.mutable_item_map()->begin();
            it2 != data2.mutable_item_map()->end(); it2++)
    {
        auto it = data.mutable_item_map()->find(it2->first);

        if (it == data.mutable_item_map()->end())
        {
            return false;
        }

        if (!EqualFrom(it->second, it2->second))
        {
            return false;
        }
    }
    return true;
}

bool EqualFrom(::db::fd_item_list& data, ::db::fd_item_list& data2)
{
    
    if (data.mutable_item_list_total()->size() != data2.mutable_item_list_total()->size())
    {
        return false;
    }

    for (auto it = data.mutable_item_list_total()->begin(),
            it2 = data2.mutable_item_list_total()->begin();
            it != data.mutable_item_list_total()->end() &&
            it2 != data2.mutable_item_list_total()->end(); it++, it2++)
    {
        if (!EqualFrom(*it, *it2))
        {
            return false;
        }
    }
    if (data.mutable_item_list_add()->size() != data2.mutable_item_list_add()->size())
    {
        return false;
    }

    for (auto it = data.mutable_item_list_add()->begin(),
            it2 = data2.mutable_item_list_add()->begin();
            it != data.mutable_item_list_add()->end() &&
            it2 != data2.mutable_item_list_add()->end(); it++, it2++)
    {
        if (!EqualFrom(*it, *it2))
        {
            return false;
        }
    }
    if (data.mutable_item_list_change()->size() != data2.mutable_item_list_change()->size())
    {
        return false;
    }

    for (auto it = data.mutable_item_list_change()->begin(),
            it2 = data2.mutable_item_list_change()->begin();
            it != data.mutable_item_list_change()->end() &&
            it2 != data2.mutable_item_list_change()->end(); it++, it2++)
    {
        if (!EqualFrom(*it, *it2))
        {
            return false;
        }
    }
    if (data.mutable_item_list_del()->size() != data2.mutable_item_list_del()->size())
    {
        return false;
    }

    for (auto it = data.mutable_item_list_del()->begin(),
            it2 = data2.mutable_item_list_del()->begin();
            it != data.mutable_item_list_del()->end() &&
            it2 != data2.mutable_item_list_del()->end(); it++, it2++)
    {
        if (!EqualFrom(*it, *it2))
        {
            return false;
        }
    }
    return true;
}

bool EqualFrom(::db::fd_item_map& data, ::db::fd_item_map& data2)
{
    
    if (data.mutable_item_map_total()->size() != data2.mutable_item_map_total()->size())
    {
        return false;
    }

    for (auto it2 = data2.mutable_item_map_total()->begin();
            it2 != data2.mutable_item_map_total()->end(); it2++)
    {
        auto it = data.mutable_item_map_total()->find(it2->first);

        if (it == data.mutable_item_map_total()->end())
        {
            return false;
        }

        if (!EqualFrom(it->second, it2->second))
        {
            return false;
        }
    }
    if (data.mutable_item_map_add()->size() != data2.mutable_item_map_add()->size())
    {
        return false;
    }

    for (auto it2 = data2.mutable_item_map_add()->begin();
            it2 != data2.mutable_item_map_add()->end(); it2++)
    {
        auto it = data.mutable_item_map_add()->find(it2->first);

        if (it == data.mutable_item_map_add()->end())
        {
            return false;
        }

        if (!EqualFrom(it->second, it2->second))
        {
            return false;
        }
    }
    if (data.mutable_item_map_change()->size() != data2.mutable_item_map_change()->size())
    {
        return false;
    }

    for (auto it2 = data2.mutable_item_map_change()->begin();
            it2 != data2.mutable_item_map_change()->end(); it2++)
    {
        auto it = data.mutable_item_map_change()->find(it2->first);

        if (it == data.mutable_item_map_change()->end())
        {
            return false;
        }

        if (!EqualFrom(it->second, it2->second))
        {
            return false;
        }
    }
    if (data.mutable_item_map_del()->size() != data2.mutable_item_map_del()->size())
    {
        return false;
    }

    for (auto it2 = data2.mutable_item_map_del()->begin();
            it2 != data2.mutable_item_map_del()->end(); it2++)
    {
        auto it = data.mutable_item_map_del()->find(it2->first);

        if (it == data.mutable_item_map_del()->end())
        {
            return false;
        }

        if (!EqualFrom(it->second, it2->second))
        {
            return false;
        }
    }
    return true;
}

bool EqualFrom(::db::tb_person_merge& data, ::db::tb_person_merge& data2)
{
    
    if (data.uuid() != data2.uuid())
    {
        return false;
    }
    if (data.job() != data2.job())
    {
        return false;
    }
    if (data.name() != data2.name())
    {
        return false;
    }
    if (!EqualFrom(*data.mutable_item(), *data2.mutable_item()))
    {
        return false;
    }
    if (!EqualFrom(*data.mutable_item_list(), *data2.mutable_item_list()))
    {
        return false;
    }
    if (!EqualFrom(*data.mutable_item_map(), *data2.mutable_item_map()))
    {
        return false;
    }
    return true;
}


bool CreatePatch(::db::fd_task& data, ::db::fd_task& data2, ::db::fd_task& merge)
{
    
    if (data.task_id() != data2.task_id())
    {
        merge.set_task_id(data.task_id());
    }
    if (data.count() != data2.count())
    {
        merge.set_count(data.count());
    }
    if (data.state() != data2.state())
    {
        merge.set_state(data.state());
    }
    return true;
}

bool ApplyPatch(::db::fd_task& data, ::db::fd_task& merge)
{
    
    if (merge.has_task_id())
    {
        data.set_task_id(merge.task_id());
    }
    if (merge.has_count())
    {
        data.set_count(merge.count());
    }
    if (merge.has_state())
    {
        data.set_state(merge.state());
    }
    return true;
}
bool CreatePatch(::db::fd_item& data, ::db::fd_item& data2, ::db::fd_item& merge)
{
    
    if (data.tid() != data2.tid())
    {
        merge.set_tid(data.tid());
    }
    if (data.count() != data2.count())
    {
        merge.set_count(data.count());
    }
    return true;
}

bool ApplyPatch(::db::fd_item& data, ::db::fd_item& merge)
{
    
    if (merge.has_tid())
    {
        data.set_tid(merge.tid());
    }
    if (merge.has_count())
    {
        data.set_count(merge.count());
    }
    return true;
}
bool CreatePatch(::db::tb_person& data, ::db::tb_person& data2, ::db::tb_person& merge)
{
    
    if (data.uuid() != data2.uuid())
    {
        merge.set_uuid(data.uuid());
    }
    if (data.job() != data2.job())
    {
        merge.set_job(data.job());
    }
    if (data.name() != data2.name())
    {
        merge.set_name(data.name());
    }
    if (!EqualFrom(*data.mutable_item(), *data2.mutable_item()))
    {
        if (!CreatePatch(*data.mutable_item(), *data2.mutable_item(), *merge.mutable_item()))
        {
            return false;
        }
    }
    
    
    return true;
}

bool ApplyPatch(::db::tb_person& data, ::db::tb_person& merge)
{
    
    if (merge.has_uuid())
    {
        data.set_uuid(merge.uuid());
    }
    if (merge.has_job())
    {
        data.set_job(merge.job());
    }
    if (merge.has_name())
    {
        data.set_name(merge.name());
    }
    if (merge.has_item())
    {
        if (!ApplyPatch(*data.mutable_item(), *merge.mutable_item()))
        {
            return false;
        }
    }
    
    
    return true;
}
bool CreatePatch(::db::fd_item_list& data, ::db::fd_item_list& data2, ::db::fd_item_list& merge)
{
    
    
    
    
    
    return true;
}

bool ApplyPatch(::db::fd_item_list& data, ::db::fd_item_list& merge)
{
    
    
    
    
    
    return true;
}
bool CreatePatch(::db::fd_item_map& data, ::db::fd_item_map& data2, ::db::fd_item_map& merge)
{
    
    
    
    
    
    return true;
}

bool ApplyPatch(::db::fd_item_map& data, ::db::fd_item_map& merge)
{
    
    
    
    
    
    return true;
}
bool CreatePatch(::db::tb_person_merge& data, ::db::tb_person_merge& data2, ::db::tb_person_merge& merge)
{
    
    if (data.uuid() != data2.uuid())
    {
        merge.set_uuid(data.uuid());
    }
    if (data.job() != data2.job())
    {
        merge.set_job(data.job());
    }
    if (data.name() != data2.name())
    {
        merge.set_name(data.name());
    }
    if (!EqualFrom(*data.mutable_item(), *data2.mutable_item()))
    {
        if (!CreatePatch(*data.mutable_item(), *data2.mutable_item(), *merge.mutable_item()))
        {
            return false;
        }
    }
    if (!EqualFrom(*data.mutable_item_list(), *data2.mutable_item_list()))
    {
        if (!CreatePatch(*data.mutable_item_list(), *data2.mutable_item_list(), *merge.mutable_item_list()))
        {
            return false;
        }
    }
    if (!EqualFrom(*data.mutable_item_map(), *data2.mutable_item_map()))
    {
        if (!CreatePatch(*data.mutable_item_map(), *data2.mutable_item_map(), *merge.mutable_item_map()))
        {
            return false;
        }
    }
    return true;
}

bool ApplyPatch(::db::tb_person_merge& data, ::db::tb_person_merge& merge)
{
    
    if (merge.has_uuid())
    {
        data.set_uuid(merge.uuid());
    }
    if (merge.has_job())
    {
        data.set_job(merge.job());
    }
    if (merge.has_name())
    {
        data.set_name(merge.name());
    }
    if (merge.has_item())
    {
        if (!ApplyPatch(*data.mutable_item(), *merge.mutable_item()))
        {
            return false;
        }
    }
    if (merge.has_item_list())
    {
        if (!ApplyPatch(*data.mutable_item_list(), *merge.mutable_item_list()))
        {
            return false;
        }
    }
    if (merge.has_item_map())
    {
        if (!ApplyPatch(*data.mutable_item_map(), *merge.mutable_item_map()))
        {
            return false;
        }
    }
    return true;
}

bool DiffFrom(::db::tb_person& data, ::db::tb_person& data2, ::db::tb_person_merge& merge)
{
    if (EqualFrom(data, data2))
    {
        return true;
    }
    if (data.uuid() != data2.uuid())
    {
        merge.set_uuid(data2.uuid());
    }
    if (data.job() != data2.job())
    {
        merge.set_job(data2.job());
    }
    if (data.name() != data2.name())
    {
        merge.set_name(data2.name());
    }
    if (!EqualFrom(*data.mutable_item(), *data2.mutable_item()))
    {
        if (!CreatePatch(*data.mutable_item(), *data2.mutable_item(), *merge.mutable_item()))
        {
            return false;
        }
    }
    for (auto it = data.mutable_item_list()->begin(),
            it2 = data2.mutable_item_list()->begin();
            it != data.mutable_item_list()->end() &&
            it2 != data2.mutable_item_list()->end(); it++, it2++)
    {
        if (!EqualFrom(*it, *it2))
        {
            *merge.mutable_item_list()->mutable_item_list_total() = *data2.mutable_item_list();
            break;
        }
    }
    for (auto it2 = data2.mutable_item_map()->begin();
            it2 != data2.mutable_item_map()->end(); it2++)
    {
        auto it = data.mutable_item_map()->find(it2->first);

        if (it == data.mutable_item_map()->end())
        {
            (*merge.mutable_item_map()->mutable_item_map_add())[it2->first] = it2->second;
            continue;
        }

        (*merge.mutable_item_map()->mutable_item_map_change())[it2->first] = it2->second;
    }
    for (auto it = data.mutable_item_map()->begin();
            it != data.mutable_item_map()->end(); it++)
    {
        auto it2 = data2.mutable_item_map()->find(it->first);

        if (it2 == data2.mutable_item_map()->end())
        {
            (*merge.mutable_item_map()->mutable_item_map_del())[it2->first] = it2->second;
            continue;
        }

        (*merge.mutable_item_map()->mutable_item_map_change())[it2->first] = it2->second;
    }

    return true;
}

bool MergeFrom(::db::tb_person& data, ::db::tb_person_merge& merge)
{
    
    if (merge.has_uuid())
    {
        data.set_uuid(merge.uuid());
    }
    if (merge.has_job())
    {
        data.set_job(merge.job());
    }
    if (merge.has_name())
    {
        data.set_name(merge.name());
    }
    if (merge.has_item())
    {
        if (!ApplyPatch(*data.mutable_item(), *merge.mutable_item()))
        {
            return false;
        }
    }
    if (merge.has_item_list())
    {
        *data.mutable_item_list() = *merge.mutable_item_list()->mutable_item_list_total();
    }
    if (!merge.mutable_item_map()->mutable_item_map_del()->empty())
    {
        for (auto it = merge.mutable_item_map()->mutable_item_map_del()->begin();
                it != merge.mutable_item_map()->mutable_item_map_del()->end();)
        {
            auto it2 = data.mutable_item_map()->find(it->first);

            if (it2 != data.mutable_item_map()->end())
            {
                merge.mutable_item_map()->mutable_item_map_del()->erase(it++);
            }
            else
            {
                it++;
            }
        }
    }

    if (!merge.mutable_item_map()->mutable_item_map_change()->empty())
    {
        for (auto it = merge.mutable_item_map()->mutable_item_map_change()->begin();
                it != merge.mutable_item_map()->mutable_item_map_change()->end(); it++)
        {
            auto it2 = data.mutable_item_map()->find(it->first);

            if (it2 != data.mutable_item_map()->end())
            {
                it->second = it2->second;
            }
        }
    }

    if (!merge.mutable_item_map()->mutable_item_map_add()->empty())
    {
        for (auto it = merge.mutable_item_map()->mutable_item_map_add()->begin();
                it != merge.mutable_item_map()->mutable_item_map_add()->end(); it++)
        {
            auto it2 = data.mutable_item_map()->find(it->first);

            if (it2 == data.mutable_item_map()->end())
            {
                (*data.mutable_item_map())[it->first] = it->second;
            }
        }
    }

    if (!merge.mutable_item_map()->mutable_item_map_total()->empty())
    {
        *data.mutable_item_map() = *merge.mutable_item_map()->mutable_item_map_total();;
    }

    return true;
}

